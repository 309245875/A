#!/bin/bash
# Author: Aniverse
# https://github.com/Aniverse/A
# bash -c "$(wget -qO- https://github.com/Aniverse/A/raw/i/a)"
# bash <(curl -s https://raw.githubusercontent.com/Aniverse/A/i/a) -f
#
# wget -qO a https://github.com/Aniverse/A/raw/i/a && bash a -abc
# bash <(wget -qO- https://github.com/Aniverse/A/raw/i/a) -ac

# Thanks to git.io/superbench.sh    bench.sh   nench.sh

ScriptVersion=1.2.2.8
SCRIPTUPDATE=2019.05.03

debug=0
show_ip=1
show_ipip=1
test_io=1
full_ip=0

# 运行参数 --------------------------------------------------------------------------------------------------------

OPTS=$(getopt -n "$0" -o abcdfghi --long "debug,no-ip,no-ipip,no-io,full-ip,down-test,speedtest,iperf_test,ioping" -- "$@")
eval set -- "$OPTS"

while true; do
  case "$1" in
    -a | --no-ip       ) show_ip=0       ; shift ;;
    -b | --no-ipip     ) show_ipip=0     ; shift ;;
    -c | --no-io       ) test_io=0       ; shift ;;
    -d | --debug       ) debug=1         ; shift ;;
    -f | --full-ip     ) full_ip=1       ; shift ;;
    -g | --down-test   ) down-test=1     ; shift ;;
    -h | --speedtest   ) spd_test=1      ; shift ;;
    -i | --iperf       ) iperf_test=1    ; shift ;;
         --ioping      ) do_ioping=1     ; shift ;;
    -- ) shift; break ;;
     * ) break ;;
  esac
done

# 颜色 --------------------------------------------------------------------------------------------------------



black=$(tput setaf 0); red=$(tput setaf 1); green=$(tput setaf 2); yellow=$(tput setaf 3);
blue=$(tput setaf 4); magenta=$(tput setaf 5); cyan=$(tput setaf 6); white=$(tput setaf 7);
on_red=$(tput setab 1); on_green=$(tput setab 2); on_yellow=$(tput setab 3); on_blue=$(tput setab 4);
on_magenta=$(tput setab 5); on_cyan=$(tput setab 6); on_white=$(tput setab 7); bold=$(tput bold);
dim=$(tput dim); underline=$(tput smul); reset_underline=$(tput rmul); standout=$(tput smso);
reset_standout=$(tput rmso); normal=$(tput sgr0); alert=${white}${on_red}; title=${standout};
baihuangse=${white}${on_yellow}; bailanse=${white}${on_blue}; bailvse=${white}${on_green};
baiqingse=${white}${on_cyan}; baihongse=${white}${on_red}; baizise=${white}${on_magenta};
heibaise=${black}${on_white}; jiacu=${normal}${bold}
shanshuo=$(tput blink); wuguangbiao=$(tput civis); guangbiao=$(tput cnorm)


# Ctrl+C 时恢复样式，删除无用文件
cancel() { echo -e "${normal}"
rm -f $HOME/disk.info $HOME/disk.info.2 $HOME/system_kernel_list $HOME/neighbors_all $HOME/par_list test_file_* ./ioping.static
exit ; }
trap cancel SIGINT

clear

# IP 信息相关 -------------------------------------------------------------------------------------------------


# 已经不用了的代码
function _ip_info_old () {
echo -e "${bold}正在检查服务器的地理位置（可能不准） ...${normal}"
result=$( wget -t1 -T10 -qO- http://freeapi.ipip.net/$serveripv4 )
country=$( echo $result | awk -F '"' '{print $2}' )
region=$( echo $result | awk -F '"' '{print $4}' )
city=$( echo $result | awk -F '"' '{print $6}' )
citydisplay=$( echo "$city, ")
#isp=$( echo $result | awk -F '"' '{print $10}' )
echo -e "${bold}正在检查服务器的 ISP ...${normal}"
isp=$( wget --no-check-certificate -t1 -T10 -qO- https://ipapi.co/json | grep \"org\" | awk -F '"' '{print $4}' )
echo -e "${bold}正在检查服务器的 ASN ...${normal}"
asn=$(wget --no-check-certificate -t1 -T10 -qO- https://ipapi.co/asn/)

# serveripv4=$( ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d "addr:" )
# serveripv4=$( ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' )
# serveripv6=$( wget --no-check-certificate -qO- -t1 -T8 ipv6.icanhazip.com )
# [ -n "$(grep 'eth0:' /proc/net/dev)" ] && wangka=eth0 || wangka=`cat /proc/net/dev |awk -F: 'function trim(str){sub(/^[ \t]*/,"",str); sub(/[ \t]*$/,"",str); return str } NR>2 {print trim($1)}'  |grep -Ev '^lo|^sit|^stf|^gif|^dummy|^vmnet|^vir|^gre|^ipip|^ppp|^bond|^tun|^tap|^ip6gre|^ip6tnl|^teql|^venet|^he-ipv6|^docker' |awk 'NR==1 {print $0}'`
# wangka=` ifconfig -a | grep -B 1 $(ip route get 8.8.8.8 | awk 'NR==1 {print $NF}') | head -n1 | awk '{print $1}' | sed "s/:$//"  `
# wangka=`  ip route get 8.8.8.8 | awk '{print $5}'  `
# serverlocalipv6=$( ip addr show dev $wangka | sed -e's/^.*inet6 \([^ ]*\)\/.*$/\1/;t;d' | head -n1 )
}

### 是否为 IP 地址 ###
function isValidIpAddress() { echo $1 | grep -qE '^[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?$' ; }

### 是否为内网 IP 地址 ###
function isInternalIpAddress() { echo $1 | grep -qE '(192\.168\.((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.((\d{1,2})$|(1\d{2})$|(2[0-4]\d)$|(25[0-5])$))|(172\.((1[6-9])|(2\d)|(3[0-1]))\.((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.((\d{1,2})$|(1\d{2})$|(2[0-4]\d)$|(25[0-5])$))|(10\.((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.((\d{1,2})$|(1\d{2})$|(2[0-4]\d)$|(25[0-5])$))' ; }



# 遮掉 IP 末位，copied from nench.sh
function redact_ip() {
    case "$1" in
        *.*)
            printf '%s.xxx\n' "$(printf '%s\n' "$1" | cut -d . -f 1-3)"
            ;;
        *:*)
            printf '%s:xxxx\n' "$(printf '%s\n' "$1" | cut -d : -f 1-3)"
            ;;
    esac
}



function _ip() {

echo -e "${bold}正在检查服务器的 IPv4 信息 ...${normal}"
serveripv4=$( ip route get 8.8.8.8 | awk '{print $3}' | head -1 )

isInternalIpAddress "$serveripv4" || serveripv4=$( wget --no-check-certificate -t1 -T6 -qO- v4.ipv6-test.com/api/myip.php )
isValidIpAddress    "$serveripv4" || serveripv4=$( wget --no-check-certificate -t1 -T6 -qO- checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//' )
isValidIpAddress    "$serveripv4" || serveripv4=$( wget --no-check-certificate -t1 -T7 -qO- ipecho.net/plain )
isValidIpAddress    "$serveripv4" || { echo "${red}${shanshuo}WARNING ${jiacu}${underline}Failed to detect your public IPv4 address, use internal address instead${jiacu}" ; serveripv4=$( ip route get 8.8.8.8 | awk '{print $3}' | head -1 ) ; }

echo -e "${bold}正在检查服务器的 IPv6 信息 ...${normal}"
serveripv6=$( wget -t1 -T5 -qO- v6.ipv6-test.com/api/myip.php | grep -Eo "[0-9a-z:]+" | head -1 )

serveripv6_show=$(redact_ip "$serveripv6") ; [[ $full_ip == 1 ]] && serveripv6_show=$serveripv6
serveripv4_show=$(redact_ip "$serveripv4") ; [[ $full_ip == 1 ]] && serveripv4_show=$serveripv4

}



function _ipip() {
echo -e "${bold}正在检查服务器的其他 IP 信息 ... (可能要很久)${normal}"

#ipip_result=/tmp/ipip_result ; touch $ipip_result 2> /dev/null || ipip_result=$HOME/ipip_result
#[[ ! -e $ipip_result ]] && 

ipip_result=$HOME/ipip_result
wget --no-check-certificate -qO- https://www.ipip.net/ip.html > $ipip_result 2>&1

# ipip_Loc=$( cat $ipip_result | grep -A3 地理位置   | grep -v 地理位置 | grep -oE ">.*<" | sed "s/>//" | sed "s/<//" )
# ipip_ISP=$( cat $ipip_result | grep -A3 -E "运营商|所有者" | grep -Ev "运营商|所有者" | grep -oE ">.*<" | sed "s/>//" | sed "s/<//" )

  ipip_IP=$( cat $ipip_result | grep -A3 IP     | grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | head -1 )
 ipip_ASN=$( cat $ipip_result | grep -C7 ASN    | grep -oE "AS[0-9]+" | head -1 )
ipip_CIDR=$( cat $ipip_result | grep -C7 ASN    | grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+" | head -1 )
# 2019.04.02 原先的已失效
# ipip_AS=$( cat $ipip_result | grep -A1 $ipip_CIDR | grep -v $ipip_CIDR | grep -oE ">.*<" | sed "s/>//" | sed "s/<//" | head -1 )
ipip_AS=$( cat $ipip_result | grep -A1 $ipip_CIDR | grep -v $ipip_CIDR | grep -o "$ipip_ASN.*</a" | cut -d '>' -f2 | cut -d '<' -f1 )
ipip_rDNS=$( cat $ipip_result | grep -oE "rDNS: [a-zA-Z0-9.-]+" | sed "s/rDNS: //" )
 ipip_Loc=$( cat $ipip_result | grep -A10 "https://tools.ipip.net/traceroute.php?ip=" | grep 720px | grep -oE ">.*<" | sed "s/>//" | sed "s/<//" )
 ipip_ISP=$( cat $ipip_result | grep "display: inline-block;text-align: center;width: 720px;float: left;line-height: 46px" | sed -n '2p' | grep -oE ">.*<" | sed "s/>//" | sed "s/<//" )

#[[ $ipip_result == $HOME/ipip_result ]] && 
rm -f $ipip_result

}





# 操作系统、内核等参数检测 ---------------------------------------------------------------------------------------



echo -e "${bold}正在检查操作系统与内核 ...${normal}"

[ -f /etc/redhat-release ] && KNA=$(awk '{print $1}' /etc/redhat-release)
[ -f /etc/os-release     ] && KNA=$(awk -F'[= "]' '/PRETTY_NAME/{print $3}' /etc/os-release)
[ -f /etc/lsb-release    ] && KNA=$(awk -F'[="]+' '/DISTRIB_ID/{print $2}' /etc/lsb-release)

get_opsy() {
[ -f /etc/redhat-release ] && awk '{print ($1,$3$HOME/^[0-9]/?$3:$4)}' /etc/redhat-release && return
[ -f /etc/os-release     ] && awk -F'[= "]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return
[ -f /etc/lsb-release    ] && awk -F'[="]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return ; }

running_kernel=$(uname -r 2>1 )
arch=$( uname -m 2>1 )     # 架构，可以识别 ARM
lbit=$( getconf LONG_BIT ) # 只显示多少位，无法识别 ARM
[ -z $arch ] && arch=$(echo "x$(getconf LONG_BIT)")

DISTRO=$(awk -F'[= "]' '/PRETTY_NAME/{print $3}' /etc/os-release)
DISTROL=$(echo $DISTRO | tr 'A-Z' 'a-z')
[[ $DISTRO =~ (Ubuntu|Debian) ]] && CODENAME=$(cat /etc/os-release | grep VERSION= | tr '[A-Z]' '[a-z]' | sed 's/\"\|(\|)\|[0-9.,]\|version\|lts//g' | awk '{print $2}' | head -1)
[[ $DISTRO == Ubuntu ]] && osversion=$(grep Ubuntu /etc/issue | head -1 | grep -oE  "[0-9.]+")
[[ $DISTRO == Debian ]] && osversion=$(cat /etc/debian_version)
#[[ $KNA =~ (CentOS|Fedora) ]] && DISTRO=$( get_opsy )
[[ ! $DISTRO =~ (Ubuntu|Debian) ]] && DISTRO=$( get_opsy )

[[ $(command -v dpkg) ]] && {
rm -f $HOME/system_kernel_list
dpkg -l | grep linux-image   | awk '{print $2}' >  $HOME/system_kernel_list
dpkg -l | grep linux-headers | awk '{print $2}' >> $HOME/system_kernel_list
dpkg -l | grep linux-modules | awk '{print $2}' >> $HOME/system_kernel_list
dpkg -l | grep ovhkernel     | awk '{print $2}' >> $HOME/system_kernel_list
dpkg -l | grep pve-kernel    | awk '{print $2}' >> $HOME/system_kernel_list ; }



# TCP 信息相关 ---------------------------------------------------------------------------------------------------



echo -e "${bold}正在检查 TCP 信息 ...${normal}"

tcp_control=$( cat /proc/sys/net/ipv4/tcp_congestion_control 2>1 )
tcp_control_all=$( cat /proc/sys/net/ipv4/tcp_available_congestion_control 2>1 )

tcp_c_name=$tcp_control
[[ $tcp_control == bbr_powered ]] && tcp_c_name="bbr_powered (用 Vicer 脚本安装的 Yankee 版魔改 BBR)"
[[ $tcp_control == tsunami     ]] && tcp_c_name="tsunami (Yankee 版魔改 BBR)"
[[ $tcp_control == nanqinlang  ]] && tcp_c_name="nanqinlang (南琴浪版魔改 BBR)"

# 检查理论上内核是否支持锐速
SSKernel="${red}否${jiacu}"
URLKernel=https://raw.githubusercontent.com/0oVicero0/serverSpeeder_kernel/master/serverSpeeder.txt
AcceVer=$(wget --no-check-certificate -qO- "$URLKernel" | grep "$KNA/" | grep "/x$KernelBit/" | grep "/$running_kernel/" | awk -F'/' '{print $NF}' | sort -n -k 2 -t '_' | tail -1)
MyKernel=$(wget --no-check-certificate -qO- "$URLKernel" | grep "$KNA/" | grep "/x$KernelBit/" | grep "/$running_kernel/" | grep "$AcceVer" | tail -1)
[[ ! -z "$MyKernel" ]] && SSKernel="${green}是${jiacu}"

# 检查理论上内核是否支持原版 BBR
function version_ge(){ test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" == "$1" ; }

kernel_vvv=$( uname -r | cut -d- -f1 )
if version_ge $kernel_vvv 4.9                                     ; then BBRKernel="${green}是${jiacu}" ; else BBRKernel="${red}否${jiacu}" ; fi
if version_ge $kernel_vvv 4.10 && ! version_ge $kernel_vvv 4.16   ; then YKKernel="${green}是${jiacu}"  ; else YKKernel="${red}否${jiacu}"  ; fi
if version_ge $kernel_vvv 4.9.3 && ! version_ge $kernel_vvv 4.16  ; then NQLKernel="${green}是${jiacu}" ; else NQLKernel="${red}否${jiacu}" ; fi

# 检查 锐速 与 BBR 是否已启用
[[ ` ps aux | grep appex | grep -v grep ` ]] && SSrunning="${green}是${jiacu}" || SSrunning="${red}否${jiacu}"
if [[ $tcp_control =~ (nanqinlang|tsunami|bbr|bbr2|bbr_powered) ]]; then bbrinuse="${green}是${jiacu}"
else bbrinuse="${red}否${jiacu}" ; fi

# Virt-what 相关 ----------------------------------------------------------------------------------------------


echo -e "${bold}正在检查虚拟化技术 ...${normal}"

if [[ $EUID = 0 ]]; then
    wget --no-check-certificate -qO /usr/local/bin/virt-what https://github.com/Aniverse/inexistence/raw/master/03.Files/app/virt-what
    mkdir -p /usr/lib/virt-what
    wget --no-check-certificate -qO /usr/lib/virt-what/virt-what-cpuid-helper https://github.com/Aniverse/inexistence/raw/master/03.Files/app/virt-what-cpuid-helper
    chmod +x /usr/local/bin/virt-what /usr/lib/virt-what/virt-what-cpuid-helper
    virtual="$(virt-what)" 2>/dev/null
# https://raw.githubusercontent.com/oooldking/script/master/superbench_git.sh
else
    virtualx=$(dmesg 2>1) 

    if  [ $(which dmidecode) ]; then
        sys_manu=$(dmidecode -s system-manufacturer) 2>/dev/null
        sys_product=$(dmidecode -s system-product-name) 2>/dev/null
        sys_ver=$(dmidecode -s system-version) 2>/dev/null
    else
        sys_manu=""
        sys_product=""
        sys_ver=""
    fi
    
    if grep docker /proc/1/cgroup -qa 2>/dev/null ; then
        virtual="Docker"
    elif grep lxc /proc/1/cgroup -qa 2>/dev/null; then
        virtual="Lxc"
    elif grep -qa container=lxc /proc/1/environ 2>/dev/null; then
        virtual="Lxc"
    elif [[ -f /proc/user_beancounters ]]; then
        virtual="OpenVZ"
    elif [[ "$virtualx" == *kvm-clock* ]]; then
        virtual="KVM"
#   elif [[ "$cname" == *KVM* ]]; then
#       virtual="KVM"
    elif [[ "$virtualx" == *"VMware Virtual Platform"* ]]; then
        virtual="VMware"
    elif [[ "$virtualx" == *"Parallels Software International"* ]]; then
        virtual="Parallels"
    elif [[ "$virtualx" == *VirtualBox* ]]; then
        virtual="VirtualBox"
    elif [[ -e /proc/xen ]]; then
        virtual="Xen"
    elif [[ "$sys_manu" == *"Microsoft Corporation"* ]]; then
        if [[ "$sys_product" == *"Virtual Machine"* ]]; then
            if [[ "$sys_ver" == *"7.0"* || "$sys_ver" == *"Hyper-V" ]]; then
                virtual="Hyper-V"
            else
                virtual="Microsoft Virtual Machine"
            fi
        fi
#   else
#       virtual="Dedicated"
    fi
fi






# 共享盒子 邻居信息 ------------------------------------------------------------------------------------------

serverfqdn=$( hostname -f 2>1 )
[ -z $serverfqdn ] && serverfqdn=$( hostname 2>1 )

Seedbox=Unknown
echo $serverfqdn | grep -q feral          && Seedbox=FH
echo $serverfqdn | grep -q seedhost       && Seedbox=SH
echo $serverfqdn | grep -q pulsedmedia    && Seedbox=PM
echo $serverfqdn | grep -q ultraseedbox   && Seedbox=USB
echo $serverfqdn | grep -q appbox         && Seedbox=AppBox && Docker=1
echo $serverfqdn | grep -q seedboxes.cc   && Seedbox=Sbcc   && Docker=1
[[ $Seedbox == FH ]] && df -hPl | grep -q "/media/md" && FH_SSD=1

[[ $debug == 1 ]] && echo -e "Seedbox=$Seedbox  FH_SSD=$FH_SSD"

# 所有硬盘分区
df -hPl | grep -wvP '\-|none|tmpfs|devtmpfs|by-uuid|chroot|Filesystem|udev|docker|md[0-9]+/[a-z].*' | sort -u > $HOME/par_list

[[ ! $Seedbox == Unknown ]] && [[ ! $EUID = 0 ]] && [[ ! $virtual == Docker ]] && {

echo -e "${bold}正在检查盒子的邻居情况 ...${normal}"

current_disk=$(echo $(pwd) | sed "s/\/$(whoami)//")
[[ $Seedbox == USB    ]] && current_disk=$(echo $(pwd) | sed "s/\/$(whoami)//") # /home11    这样子的
[[ $Seedbox == PM     ]] && current_disk=$(echo $(pwd) | sed "s/\/$(whoami)//") # /home       这样子的
[[ $Seedbox == SH     ]] && current_disk=$(echo $(pwd) | sed "s/\/$(whoami)//") # /home22     这样子的
[[ $Seedbox == FH     ]] && current_disk=$(echo $(pwd) | sed "s/\/$(whoami)//") # /media/sdk1 这样子的，或者 /media/98811
[[ $Seedbox == DSD    ]] && current_disk=$(echo $(pwd) | sed "s/\/$(whoami)//") # /           这样子的
[[ $Seedbox == Sbcc   ]] && current_disk=$(echo $(pwd) | sed "s/\/$(whoami)//") # /home/user  这样子的
[[ $Seedbox == AppBox ]] && [[ ! $(whoami) == root  ]] && current_disk=/home/$(whoami)
[[ $Seedbox == AppBox ]] && [[   $(whoami) == root  ]] && current_disk=/root
# /media/sdr1/home 这样子的，一些老的 FH HDD 会出现这样的
[[ $Seedbox == FH  ]] && echo $current_disk | grep -q "/home" && current_disk=$(echo $current_disk | sed "s/\/home//") && FH_HOME=1

# 所有邻居
getent passwd | grep -Ev "$(whoami)|root" | grep -E "/bin/sh|/bin/bash" | grep -E "home|home[0-9]+|media" > $HOME/neighbors_all

neighbors_all_num=$(cat $HOME/neighbors_all | wc -l)
neighbors_same_disk_num=$(cat $HOME/neighbors_all | grep "$current_disk" | wc -l)

if [[ $FH_SSD == 1 ]];then
    current_disk_size=($( LANG=C df -hPl | grep $(pwd) | awk '{print $2}' ))
    current_disk_total_used=($( LANG=C df -hPl | grep $(pwd) | awk '{print $3}' ))
    current_disk_self_used=$( du -sh $HOME 2>1 | awk -F " " '{print $1}' )
else
    current_disk_size=($( LANG=C df -hPl | grep $current_disk | awk '{print $2}' ))
    current_disk_total_used=($( LANG=C df -hPl | grep $current_disk | awk '{print $3}' ))
    current_disk_self_used=$( du -sh $HOME 2>1 | awk -F " " '{print $1}' )
fi

#current_disk_avai=($( LANG=C df -hPl | grep $current_disk | awk '{print $4}' ))
#current_disk_perc=($( LANG=C df -hPl | grep $current_disk | awk '{print $5}' ))

}







# 硬盘信息 ----------------------------------------------------------------------------------------------


echo -e "${bold}正在检查硬盘信息 ...${normal}"

# 硬盘大小计算
calc_disk() {
local total_size=0 ; local array=$@
for size in ${array[@]} ; do
[ "${size}" == "0" ] && size_t=0 || size_t=`echo ${size:0:${#size}-1}`
[ "`echo ${size:(-1)}`" == "K" ] && size=0
[ "`echo ${size:(-1)}`" == "M" ] && size=$( awk 'BEGIN{printf "%.1f", '$size_t' / 1024}' )
[ "`echo ${size:(-1)}`" == "T" ] && size=$( awk 'BEGIN{printf "%.1f", '$size_t' * 1024}' )
[ "`echo ${size:(-1)}`" == "G" ] && size=${size_t}
total_size=$( awk 'BEGIN{printf "%.1f", '$total_size' + '$size'}' )
done ; echo ${total_size} ; }

# 其实这个判定对于独服可能不太对
#disk_par_num=$(df -lh | grep -P "/home[0-9]+|media|home|mnt" | wc -l)
disk_par_num=$(cat $HOME/par_list | wc -l)
# 这个估计没毛病，Docker、独服、KVM 下都没问题的样子，别的不知道
# disk_par_num=$(lsblk --nodeps --noheadings --output NAME,SIZE,ROTA --exclude 1,2,11 2>1 | wc -l)


# / 为最大分区时，数字 +1
[[ $(df -lh | grep $(df -k | sort -rn -k4 | awk '{print $1}' | head -1) | awk '{print $NF}') == / ]] && disk_par_num=$(expr $disk_par_num + 1)

# 计算总共空间的时候，排除掉 FH SSD 每个用户限额的空间；计算已用空间的时候不排除（因为原先的单个 md 已用空间只有 128k/256k）
disk_size1=($( LANG=C df -hPl | grep -wvP '\-|none|tmpfs|devtmpfs|by-uuid|chroot|Filesystem|udev|docker|md[0-9]+/[a-z]*' | awk '{print $2}' ))
disk_size2=($( LANG=C df -hPl | grep -wvP '\-|none|tmpfs|devtmpfs|by-uuid|chroot|Filesystem|udev|docker' | awk '{print $3}' ))
disk_total_size=$( calc_disk ${disk_size1[@]} )
disk_used_size=$( calc_disk ${disk_size2[@]} )

# 2019.01.04 今天才知道原来 lsblk 还能看硬盘型号……
# 2019.04.08 改进下输出

# lsblk --nodeps --exclude 1,2,11 --output NAME,SIZE,ROTA,MODEL | awk '{if ($3 == 0) {$3="SSD"} if ($3 == 1) {$3="HDD"} ; printf("%-5s%7s%5s   %-10s%-15s\n", $1, $2, $3, $4, $5)}' 2>&1
# lsblk --exclude 1,2,11 --output NAME,SIZE,ROTA,TYPE,MOUNTPOINT,MODEL
# lsblk -dn -e 1,2,11 -o MODEL

disk_size=$(lsblk --nodeps --noheadings --output SIZE 2>1 | awk '{print $1}')
disk_total_size=$( calc_disk ${disk_size[@]} )
#disk_used_size=$( du -sh $HOME 2>1 | awk -F " " '{print $1}' | sed "s/G//" )









# 检查 RAID 类型
# Origin code from https://github.com/dave-pl/hwcheck
function _disk_raid_check () {

[[ $debug == 1 ]] && lspci | grep -E "RAID|SCSI|SATA"

rm -f $HOME/disk.info

if [[ -n `lspci|grep -i "RAID bus controller"|grep "MegaRAID"` ]]; then
    raidcard=MegaRAID
    RC_Model="$(lspci|grep -i "RAID bus controller"|grep "MegaRAID" | awk -F ":" '{print $3}' | sed "s/^ //")"
elif [[ -n `lspci|grep -i "RAID bus controller"|grep "Hewlett-Packard"` ]]; then
    raidcard=HP-RAID
    RC_Model="$(lspci|grep -i "RAID bus controller"|grep "Hewlett-Packard" | awk -F ":" '{print $3}' | sed "s/^ //")"
elif [[ -n `lspci|grep -i "RAID bus controller"|grep "Adaptec"` ]]; then
    raidcard=Adaptec
elif [[ -n `lspci|grep -i "SCSI controller"` ]]; then
    raidcard=SCSI
    RC_Model="$(lspci|grep -i "SCSI controller" | awk -F ":" '{print $3}' | sed "s/^ //")"
elif [[ -n $(fdisk -l 2>/dev/null|grep /dev/nvme) ]]; then
    raidcard=NVMe
else
    raidcard=NoRaid # 其实还有很多种情况检测不到的，不管了
fi

case "$raidcard" in
    NoRaid   ) disk=$(fdisk -l 2>/dev/null| grep -i dev |egrep -v "(/dev/[brm])"| awk '/:/ {print $2}'| cut -f 1 -d ":") ; d=0
               for i in $disk; do
                   d=$(expr $d + 1)
                   echo "disk-$d $i $(smartctl -a $i | grep Power_On_Hours | awk '{print $NF}') $(smartctl -a $i | grep "Device Model" | sed "s/Device Model[:]\?//" | awk '{print $1,$2,$3,$4}')" >> $HOME/disk.info
               done
               ;;
    MegaRAID ) for i in `seq 0 99` ; do
			       [[ $( smartctl -a -d megaraid,$i /dev/sg0 | grep Power_On_Hours ) ]] &&
			       echo "disk-$(expr $i + 1) text $(smartctl -a -d megaraid,$i /dev/sg0 | grep Power_On_Hours | awk '{print $NF}') $(smartctl -a -d megaraid,$i /dev/sg0 | grep "Device Model" | sed "s/Device Model[:]\?//" | awk '{print $1,$2,$3,$4}')" >> $HOME/disk.info
			   done
               ;;
    HP-RAID  ) for i in `seq 0 99` ; do
                   [[ $( smartctl -a -d cciss,$i /dev/sg0 | grep Power_On_Hours ) ]] &&
			       echo "disk-$(expr $i + 1) text $(smartctl -a -d cciss,$i /dev/sg0 | grep Power_On_Hours | awk '{print $NF}') $(smartctl -a -d cciss,$i /dev/sg0 | grep "Device Model" | sed "s/Device Model[:]\?//" | awk '{print $1,$2,$3,$4}')" >> $HOME/disk.info
			   done
               ;;
    SCSI     ) for i in `seq 0 99` ; do
                   [[ $( smartctl -a /dev/sg$i | grep Power_On_Hours ) ]] &&
			       echo "disk-$(expr $i + 1) text $(smartctl -a /dev/sg$i | grep Power_On_Hours | awk '{print $NF}') $(smartctl -a /dev/sg$i | grep "Device Model" | sed "s/Device Model[:]\?//" | awk '{print $1,$2,$3,$4}')" >> $HOME/disk.info
			   done
               ;;
    NVMe     ) for i in `seq 0 99` ; do
                   [[ $( nvme smart-log /dev/nvme$i 2>&1 | grep power_on_hours ) ]] &&
			       echo "disk-$(expr $i + 1) text $(nvme smart-log /dev/nvme$i | grep power_on_hours | grep -oE "[0-9,]+" | sed "s/,//") $(nvme list | grep /dev/nvme$i | sed "s/\b \b/_/g" | awk '{print $3}' | sed "s/_/ /g")" >> $HOME/disk.info
			   done
               ;;
    Adaptec  ) for i in `seq 0 99` ; do
                   [[ $( smartctl -a /dev/sg$i | grep Power_On_Hours ) ]] &&
			       echo "disk-$(expr $i + 1) text $(smartctl -a /dev/sg$i | grep Power_On_Hours | awk '{print $NF}') $(smartctl -a /dev/sg$i | grep "Device Model" | sed "s/Device Model[:]\?//" | awk '{print $1,$2,$3,$4}')" >> $HOME/disk.info
			   done
               ;;
esac

# 高版本 smartctl 也可以看 NVMe 的 smart，不过需要编译，放在一键脚本里还是太麻烦了
# 还可以用 lsblk --nodeps --noheadings --exclude 1,2,11 --output NAME,SIZE,ROTA,MODEL 2>1
# nvme list | grep /dev/nvme$i | sed "s/\b \b/_/g" | awk '{print $3}' | sed "s/_/ /g"
# udevadm info --name=/dev/nvme${i}n1 | grep "disk/by-id/nvme-" | head -1 | sed "s|S: disk/by-id/nvme-||" | awk -F '_' '{print $1,$2}'
[[ $debug == 1 ]] && echo -e "raidcard=$raidcard" && cp -f $HOME/disk.info $HOME/.disk.info ; }



# 共享盒子检查为主，其他的没试过
function _disk_check_no_root () {

Raid=No
# ls /dev/disk/by-id 2>/dev/null | grep -q scsi- && Raid=Hard
ls /dev/disk/by-id 2>/dev/null | grep -q md-   && Raid=Soft
# NVMe 等就不管了，没机器测试（能弄到机器了，下次再说）

[[ $debug == 1 ]] && echo -e "Raid=$Raid"

[[ ! $Raid == Hard ]] &&
ls /dev/disk/by-id 2>/dev/null | grep -oE "ata-.*" | sed "s/ata-//" | sed "s/-part.*//" | grep -oE "[a-zA-Z0-9_-]+" | grep -v 0m | sort -u > $HOME/disk.info

if [[ $virtual == Docker ]] || [[ $Seedbox == FH ]]; then
lsblk --nodeps --noheadings --output MODEL --exclude 1,2,11 2>1 > $HOME/disk.info
cat $HOME/disk.info | grep -q LSI && rm -f $HOME/disk.info && touch $HOME/disk.info
cat $HOME/disk.info | grep -qE "MR[0-9]+-" && rm -f $HOME/disk.info && touch $HOME/disk.info
cat $HOME/disk.info | grep -qE [Rr][Aa][Ii][Dd] && rm -f $HOME/disk.info && touch $HOME/disk.info
cat $HOME/disk.info | grep -q "LOGICAL VOLUME" && rm -f $HOME/disk.info && touch $HOME/disk.info  # OP 10欧 HP
cat $HOME/disk.info | grep -q "Virtual Disk" && rm -f $HOME/disk.info && touch $HOME/disk.info    # OP 10欧 DELL
# 这里我也不知道有多少种情况，乱写了
# MegaRAID 这个在 seedboes.cc（MR9271-8iCC）、Hz 16TB HWR（MR9260-4i）上测试通过
fi

cat $HOME/disk.info 2>/dev/null | sed -e 's/\(.*\)_/\1:/' | sed "s/:.*//" | sort -u > $HOME/disk.info.2
# disk_num=$( cat $HOME/disk.info 2>/dev/null | wc -l )
disk_num=$( lsblk --nodeps --noheadings --output NAME,SIZE,ROTA --exclude 1,2,11 2>1 | wc -l )

[[ $debug == 1 ]] && echo -e "disk_num=$disk_num"

disk_model_num=$( cat $HOME/disk.info.2 2>/dev/null | wc -l )

[[ $debug == 1 ]] && echo -e "\n" && cat $HOME/disk.info.2 && echo -e "\n"

disk_model_1_num=$( cat $HOME/disk.info 2>/dev/null | grep "$(cat $HOME/disk.info.2 2>/dev/null | sed -n '1p')"  2>/dev/null | wc -l )
disk_model_2_num=$( cat $HOME/disk.info 2>/dev/null | grep "$(cat $HOME/disk.info.2 2>/dev/null | sed -n '2p')"  2>/dev/null | wc -l )
disk_model_3_num=$( cat $HOME/disk.info 2>/dev/null | grep "$(cat $HOME/disk.info.2 2>/dev/null | sed -n '3p')"  2>/dev/null | wc -l )
disk_model_4_num=$( cat $HOME/disk.info 2>/dev/null | grep "$(cat $HOME/disk.info.2 2>/dev/null | sed -n '4p')"  2>/dev/null | wc -l )
disk_model_5_num=$( cat $HOME/disk.info 2>/dev/null | grep "$(cat $HOME/disk.info.2 2>/dev/null | sed -n '5p')"  2>/dev/null | wc -l )
disk_model_6_num=$( cat $HOME/disk.info 2>/dev/null | grep "$(cat $HOME/disk.info.2 2>/dev/null | sed -n '6p')"  2>/dev/null | wc -l )
disk_model_7_num=$( cat $HOME/disk.info 2>/dev/null | grep "$(cat $HOME/disk.info.2 2>/dev/null | sed -n '7p')"  2>/dev/null | wc -l )
disk_model_8_num=$( cat $HOME/disk.info 2>/dev/null | grep "$(cat $HOME/disk.info.2 2>/dev/null | sed -n '8p')"  2>/dev/null | wc -l )
disk_model_9_num=$( cat $HOME/disk.info 2>/dev/null | grep "$(cat $HOME/disk.info.2 2>/dev/null | sed -n '9p')"  2>/dev/null | wc -l )
disk_model_0_num=$( cat $HOME/disk.info 2>/dev/null | grep "$(cat $HOME/disk.info.2 2>/dev/null | sed -n '10p')" 2>/dev/null | wc -l )

[[ $debug == 1 ]] && echo -e "disk_model_1_num=$disk_model_1_num"
[[ $debug == 1 ]] && echo -e "disk_model_2_num=$disk_model_2_num"

}


 
# 硬盘通电时间与型号检查，可能只有单个硬盘的独服才有效
# 事实上 VPS 可能也有独立的硬盘，不过我懒得管他了。。。
if [[ $EUID = 0 ]] && [[ ! "$(virt-what)" ]]; then

fdisk -l 2>/dev/null | grep /dev/nvme -q && nvme=yes

    if [[ $nvme == yes ]] && [[ ! $(which nvme) ]]; then
        echo -e "${bold}正在更新系统源 ...${normal}"
        apt-get update >/dev/null 2>&1
        yum makecache >/dev/null 2>&1
        echo -e "${bold}正在安装 nvme-cli 与 smartmontools ...${normal}"
        DEBIAN_FRONTEND=noninteractive apt-get -y install nvme-cli smartmontools >/dev/null 2>&1
        yum install -y nvme-cli smartmontools >/dev/null 2>&1
    fi

    if [[ -z $nvme ]] && [[ ! -e /usr/sbin/smartctl ]]; then
        echo -e "${bold}正在更新系统源 ...${normal}"
        apt-get update >/dev/null 2>&1
        yum makecache >/dev/null 2>&1
        echo -e "${bold}正在安装 smartmontools ...${normal}"
        DEBIAN_FRONTEND=noninteractive apt-get -y install smartmontools >/dev/null 2>&1
        yum install -y smartmontools >/dev/null 2>&1
    fi

  # result=$(smartctl -a $(result=$(cat /proc/mounts) && echo $(echo "$result" | awk '/data=ordered/{print $1}') | awk '{print $1}') 2>&1) && power_time=$(echo "$result" | awk '/Power_On/{print $10}') # echo $power_time
  # disk_model=$(echo "$result" | grep "Device Model" | sed "s/Device Model[:]\?//" | awk '{print $1,$2,$3,$4}') # echo $disk_model
  # echo "$result" | grep "Device Model" | sed "s/Device Model[:]\?.* \([a-zA-Z]\)/\1/"
  # [[ ! -z $power_time ]] && showpowertime=1

    _disk_raid_check

else

    # 共享盒子也可以检查下
    _disk_check_no_root

fi


function _show_disk_info () {

# 检查能不能得到通电时间，能得到的话脚本运行应该比较正常吧？
if [[ $(cat $HOME/disk.info 2>/dev/null | sed -n '1p' | awk '{print $3}' | grep -Ev [A-Z] | grep -oE "[0-9]+") ]]; then

disk_num=$( cat $HOME/disk.info 2>/dev/null | wc -l )
[[ $debug == 1 ]] && echo -e "disk_num=$disk_num"

# 2019.01.04：这个作为型号还是不太对，先去掉了
  # [[ ! -z $RC_Model ]] &&
  # echo -e  "  磁盘阵列卡            ${cyan}$RC_Model${jiacu}"
# 2019.04.03 啥时候改成 for？

if [[ $disk_num == 1 ]]; then
    echo -e  "  硬盘信息              ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '1p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '1p' | awk '{print $4,$5,$6,$7}')${jiacu}"
elif [[ $disk_num -ge 2 ]]; then
    echo -e  "  第一块硬盘            ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '1p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '1p' | awk '{print $4,$5,$6,$7}')${jiacu}"
    echo -e  "  第二块硬盘            ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '2p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '2p' | awk '{print $4,$5,$6,$7}')${jiacu}"
    [[ $disk_num -ge 3 ]] &&
    echo -e  "  第三块硬盘            ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '3p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '3p' | awk '{print $4,$5,$6,$7}')${jiacu}"
    [[ $disk_num -ge 4 ]] &&
    echo -e  "  第四块硬盘            ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '4p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '4p' | awk '{print $4,$5,$6,$7}')${jiacu}"
    [[ $disk_num -ge 5 ]] &&
    echo -e  "  第五块硬盘            ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '5p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '5p' | awk '{print $4,$5,$6,$7}')${jiacu}"
    [[ $disk_num -ge 6 ]] &&
    echo -e  "  第六块硬盘            ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '6p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '6p' | awk '{print $4,$5,$6,$7}')${jiacu}"
    [[ $disk_num -ge 7 ]] &&
    echo -e  "  第七块硬盘            ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '7p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '7p' | awk '{print $4,$5,$6,$7}')${jiacu}"
    [[ $disk_num -ge 8 ]] &&
    echo -e  "  第八块硬盘            ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '8p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '8p' | awk '{print $4,$5,$6,$7}')${jiacu}"
    [[ $disk_num -ge 9 ]] &&
    echo -e  "  第九块硬盘            ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '9p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '9p' | awk '{print $4,$5,$6,$7}')${jiacu}"
    [[ $disk_num -ge 10 ]] &&
    echo -e  "  第十块硬盘            ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '10p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '10p' | awk '{print $4,$5,$6,$7}')${jiacu}"
    [[ $disk_num -ge 11 ]] &&
    echo -e  "  第十一块硬盘          ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '11p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '11p' | awk '{print $4,$5,$6,$7}')${jiacu}"
    [[ $disk_num -ge 12 ]] &&
    echo -e  "  第十二块硬盘          ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '12p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '12p' | awk '{print $4,$5,$6,$7}')${jiacu}"
    [[ $disk_num -ge 13 ]] &&
    echo -e  "  第十三块硬盘          ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '13p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '13p' | awk '{print $4,$5,$6,$7}')${jiacu}"
    [[ $disk_num -ge 14 ]] &&
    echo -e  "  第十四块硬盘          ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '14p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '14p' | awk '{print $4,$5,$6,$7}')${jiacu}"
    [[ $disk_num -ge 15 ]] &&
    echo -e  "  第十五块硬盘          ${cyan}通电 $(cat $HOME/disk.info 2>/dev/null | sed -n '15p' | awk '{print $3}') 小时，型号 $(cat $HOME/disk.info 2>/dev/null | sed -n '15p' | awk '{print $4,$5,$6,$7}')${jiacu}"
    [[ $disk_num -ge 16 ]] &&
    echo -e  "  暂时不支持 16 块以上硬盘……${jiacu}"
fi

                else

if [[ $disk_model_num == 1 ]]; then
    echo -e  "  硬盘型号              ${cyan}$(cat $HOME/disk.info.2 2>/dev/null | sed -n '1p' | sed 's/$/                  /' | cut -c -27)${cyan} × $disk_model_1_num${jiacu}"
elif [[ $disk_model_num -ge 2 ]]; then
    echo -e  "  第一种硬盘            ${cyan}$(cat $HOME/disk.info.2 2>/dev/null | sed -n '1p' | sed 's/$/                  /' | cut -c -27)${cyan} × $disk_model_1_num${jiacu}"
    echo -e  "  第二种硬盘            ${cyan}$(cat $HOME/disk.info.2 2>/dev/null | sed -n '2p' | sed 's/$/                  /' | cut -c -27)${cyan} × $disk_model_2_num${jiacu}"
[[ $disk_model_num -ge 3 ]] &&
    echo -e  "  第三种硬盘            ${cyan}$(cat $HOME/disk.info.2 2>/dev/null | sed -n '3p' | sed 's/$/                  /' | cut -c -27)${cyan} × $disk_model_3_num${jiacu}"
[[ $disk_model_num -ge 4 ]] &&
    echo -e  "  第四种硬盘            ${cyan}$(cat $HOME/disk.info.2 2>/dev/null | sed -n '4p' | sed 's/$/                  /' | cut -c -27)${cyan} × $disk_model_4_num${jiacu}"
[[ $disk_model_num -ge 5 ]] &&
    echo -e  "  第五种硬盘            ${cyan}$(cat $HOME/disk.info.2 2>/dev/null | sed -n '5p' | sed 's/$/                  /' | cut -c -27)${cyan} × $disk_model_5_num${jiacu}"
[[ $disk_model_num -ge 6 ]] &&
    echo -e  "  第六种硬盘            ${cyan}$(cat $HOME/disk.info.2 2>/dev/null | sed -n '6p' | sed 's/$/                  /' | cut -c -27)${cyan} × $disk_model_6_num${jiacu}"
[[ $disk_model_num -ge 7 ]] &&
    echo -e  "  第七种硬盘            ${cyan}$(cat $HOME/disk.info.2 2>/dev/null | sed -n '7p' | sed 's/$/                  /' | cut -c -27)${cyan} × $disk_model_7_num${jiacu}"
[[ $disk_model_num -ge 8 ]] &&
    echo -e  "  第八种硬盘            ${cyan}$(cat $HOME/disk.info.2 2>/dev/null | sed -n '8p' | sed 's/$/                  /' | cut -c -27)${cyan} × $disk_model_8_num${jiacu}"
[[ $disk_model_num -ge 9 ]] &&
    echo -e  "  第九种硬盘            ${cyan}$(cat $HOME/disk.info.2 2>/dev/null | sed -n '9p' | sed 's/$/                  /' | cut -c -27)${cyan} × $disk_model_9_num${jiacu}"
[[ $disk_model_num -ge 10 ]] &&
    echo -e  "  第十种硬盘            ${cyan}$(cat $HOME/disk.info.2 2>/dev/null | sed -n '10p' | sed 's/$/                  /' | cut -c -27)${cyan} × $disk_model_10_num${jiacu}"
[[ $disk_model_num -ge 11 ]] &&
    echo -e  "  第十一种硬盘          ${cyan}$(cat $HOME/disk.info.2 2>/dev/null | sed -n '11p' | sed 's/$/                  /' | cut -c -27)${cyan} × $disk_model_11_num${jiacu}"
[[ $disk_model_num -ge 12 ]] &&
    echo -e  "  第十二种硬盘          ${cyan}$(cat $HOME/disk.info.2 2>/dev/null | sed -n '12p' | sed 's/$/                  /' | cut -c -27)${cyan} × $disk_model_12_num${jiacu}"
[[ $disk_model_num -ge 13 ]] &&
    echo -e  "  暂时不支持 12 种以上硬盘……${jiacu}"
fi

#
                fi ; }
#











# 其他硬件信息 ----------------------------------------------------------------------------------------------

echo -e "${bold}正在检查其他硬件信息 ...${normal}"

# CPU
cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//' )
cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
cpucores_single=$( grep 'core id' /proc/cpuinfo | sort -u | wc -l )
freq=$( awk -F: '/cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//' )
# physical_cpu_number=$( grep 'physical id' /proc/cpuinfo | cut -c15-17 )
# cpu_percent=$( top -b -n 1 | grep Cpu | awk '{print $2}' | cut -f 1 -d "." )
cpunumbers=$( grep 'physical id' /proc/cpuinfo | sort -u | wc -l )
cpucores=$( expr $cpucores_single \* $cpunumbers )
cputhreads=$( grep 'processor' /proc/cpuinfo | sort -u | wc -l )
[[ $cpunumbers == 2 ]] && CPUNum='双路 ' ; [[ $cpunumbers == 4 ]] && CPUNum='四路 ' ; [[ $cpunumbers == 8 ]] && CPUNum='八路 '

# 内存
tram=$( free -m | awk '/Mem/ {print $2}' )
uram=$( free -m | awk '/Mem/ {print $3}' )
swap=$( free -m | awk '/Swap/ {print $2}' )
uswap=$( free -m | awk '/Swap/ {print $3}' )
memory_usage=`free -m |grep -i mem | awk '{printf ("%.2f\n",$3/$2*100)}'`%

users=`users | wc -w`
date=$( date +%Y-%m-%d" "%H:%M:%S )
processes=`ps aux | wc -l`

uptime1=$( awk '{a=$1/86400;b=($1%86400)/3600;c=($1%3600)/60} {printf("%d days %d hour %d min\n",a,b,c)}' /proc/uptime )
uptime2=`uptime | grep -ohe 'up .*' | sed 's/,/\ hours/g' | awk '{ printf $2" "$3 }'`
load=$( w | head -1 | awk -F'load average:' '{print $2}' | sed 's/^[ \t]*//;s/[ \t]*$//' )






# 测试 ----------------------------------------------------------------------------------------------





# These codes are from nench.sh, https://github.com/n-st/nench
# ----------------------------------------------------------------------------------------------
Bps_to_MiBps() { awk '{ printf "%.2f MiB/s\n", $0 / 1024 / 1024 } END { if (NR == 0) { print "error" } }' ; }
Bps_to_MBps() { awk '{ printf "%.0f MB/s\n", $0 / 1000 / 1000 } END { if (NR == 0) { print "error" } }' ; }
Bps_to_MBps_1f() { awk '{ printf "%.1f MB/s\n", $0 / 1000 / 1000 } END { if (NR == 0) { print "error" } }' ; }
dd_benchmark() {
LC_ALL=C dd if=/dev/zero of=test_$$ bs=64k count=16k conv=fdatasync 2>&1 | awk -F, '
{ io=$NF ; }
END { if (io ~ /TB\/s/) {printf("%.0f\n", 1000*1000*1000*1000*io)}
else if (io ~ /GB\/s/) {printf("%.0f\n", 1000*1000*1000*io)}
else if (io ~ /MB\/s/) {printf("%.0f\n", 1000*1000*io)}
else if (io ~ /KB\/s/) {printf("%.0f\n", 1000*io)}
else { printf("%.0f", 1*io)} ; }'
rm -f test_$$ ; }
#io1=$( dd_benchmark )
#printf '    1st run:    %s\n' "$(printf '%d\n' "$io1" | Bps_to_MiBps)"

if [[ ! $(which ioping) ]]; then
    wget -qO ioping.static -t1 -T5 http://wget.racing/ioping.static
    chmod +x ioping.static
    ioping_cmd="./ioping.static"
else
    ioping_cmd="ioping"
fi
# ----------------------------------------------------------------------------------------------
ioping_benchmark() {
tmp=$("$ioping_cmd" -DRL -w 5 . | tail -2 | head -1 | awk -F ', ' '{print $NF}')
echo $tmp | awk -F, '
{ io=$NF ; }
END { if (io ~ /TiB\/s/) {printf("%.0f\n", 1024*1024*1024*1024*io)}
else if (io ~ /GiB\/s/) {printf("%.0f\n", 1024*1024*1024*io)}
else if (io ~ /MiB\/s/) {printf("%.0f\n", 1024*1024*io)}
else if (io ~ /KiB\/s/) {printf("%.0f\n", 1024*io)}
else { printf("%.0f", 1*io)} ; }'
}
ioping_benchmark_4k_read() {
tmp=$("$ioping_cmd" -DR -w 5 . | tail -2 | head -1 | awk -F ', ' '{print $(NF-1)}')
echo $tmp | awk -F, '
{ io=$NF ; }
END { if (io ~ /m\ iops/) {printf("%.0f\n", 1000*1000*io)}
else if (io ~ /k\ iops/) {printf("%.0f\n", 1000*io)}
else { printf("%.0f", 1*io)} ; }'
}
ioping_benchmark_4k_write() {
tmp=$("$ioping_cmd" -DWR -w 5 . | tail -2 | head -1 | awk -F ', ' '{print $(NF-1)}')
echo $tmp | awk -F, '
{ io=$NF ; }
END { if (io ~ /m\ iops/) {printf("%.0f\n", 1000*1000*io)}
else if (io ~ /k\ iops/) {printf("%.0f\n", 1000*io)}
else { printf("%.0f", 1*io)} ; }'
}
# ----------------------------------------------------------------------------------------------





# dd IO 测试
io_test() { (LANG=C dd if=/dev/zero of=test_file_$$ bs=512K count=$1 conv=fdatasync && rm -f test_file_$$ ) 2>&1 | awk -F, '{io=$NF} END { print io}' | sed 's/^[ \t]*//;s/[ \t]*$//' ; }

# 检查剩余空间
freedisk() {
	freespace=$( df -m . | awk 'NR==2 {print $4}' )
	if [[ $freespace -gt 1024 ]]; then
		printf "%s" $((1024*2))
	elif [[ $freespace -gt 512 ]]; then
		printf "%s" $((512*2))
	elif [[ $freespace -gt 256 ]]; then
		printf "%s" $((256*2))
	elif [[ $freespace -gt 128 ]]; then
		printf "%s" $((128*2))
	else
		printf 1
	fi
}

print_io() {
	writemb=$(freedisk)
	writemb_size="$(( writemb / 2 ))MB"
	[[ $writemb_size == "1024MB" ]] && writemb_size="1.0 GB"
	if [[ $writemb != "1" ]]; then
        # 因为有些情况下前两次测试 IO 速度异常的高，所以多跑两次次但是不计入统计
		echo -n "  I/O 速度 ( 不统计 )   "
		io1=$( io_test $writemb )
		echo -e "${yellow}$io1${normal}"
		echo -n "  I/O 速度 ( 不统计 )   "
		io2=$( io_test $writemb )
		echo -e "${yellow}$io2${normal}"
		echo -n "  I/O 速度 ( $writemb_size )   "
		io3=$( io_test $writemb )
		echo -e "${yellow}$io3${normal}"
		echo -n "  I/O 速度 ( $writemb_size )   "
		io4=$( io_test $writemb )
		echo -e "${yellow}$io4${normal}"
        echo -n "  I/O 速度 ( $writemb_size )   "
		io5=$( io_test $writemb )
		echo -e "${yellow}$io5${normal}"
		ioraw1=$( echo $io1 | awk 'NR==1 {print $1}' )
		[ "`echo $io1 | awk 'NR==1 {print $2}'`" == "GB/s" ] && ioraw1=$( awk 'BEGIN{print '$ioraw1' * 1024}' )
		ioraw2=$( echo $io2 | awk 'NR==1 {print $1}' )
		[ "`echo $io2 | awk 'NR==1 {print $2}'`" == "GB/s" ] && ioraw2=$( awk 'BEGIN{print '$ioraw2' * 1024}' )
		ioraw3=$( echo $io3 | awk 'NR==1 {print $1}' )
		[ "`echo $io3 | awk 'NR==1 {print $2}'`" == "GB/s" ] && ioraw3=$( awk 'BEGIN{print '$ioraw3' * 1024}' )
		ioraw4=$( echo $io4 | awk 'NR==1 {print $1}' )
		[ "`echo $io4 | awk 'NR==1 {print $2}'`" == "GB/s" ] && ioraw4=$( awk 'BEGIN{print '$ioraw3' * 1024}' )
		ioraw5=$( echo $io5 | awk 'NR==1 {print $1}' )
		[ "`echo $io5 | awk 'NR==1 {print $2}'`" == "GB/s" ] && ioraw5=$( awk 'BEGIN{print '$ioraw3' * 1024}' )
		ioall=$( awk 'BEGIN{print '$ioraw3' + '$ioraw4' + '$ioraw5'}' )
		ioavg=$( awk 'BEGIN{printf "%.1f", '$ioall' / 3}' )
		echo -e "  I/O 速度 (  平均  )   ${yellow}$ioavg MB/s${normal}"
	else
		echo -e " ${red}硬盘剩余空间不足，无法进行 IO 测试！${normal}"
	fi
echo ; }

ioping_1() {
echo
echo -n "  ioping 顺序读取 (1st) " ; ioping_read_1=$(ioping_benchmark) ; echo -e "${yellow}$(echo $ioping_read_1 | Bps_to_MBps)${normal}"
echo -n "  ioping 顺序读取 (2nd) " ; ioping_read_2=$(ioping_benchmark) ; echo -e "${yellow}$(echo $ioping_read_2 | Bps_to_MBps)${normal}"
echo -n "  ioping 顺序读取 (3rd) " ; ioping_read_3=$(ioping_benchmark) ; echo -e "${yellow}$(echo $ioping_read_3 | Bps_to_MBps)${normal}"
echo -n "  ioping 顺序读取 (4th) " ; ioping_read_4=$(ioping_benchmark) ; echo -e "${yellow}$(echo $ioping_read_4 | Bps_to_MBps)${normal}"
echo -n "  ioping 顺序读取 (5th) " ; ioping_read_5=$(ioping_benchmark) ; echo -e "${yellow}$(echo $ioping_read_5 | Bps_to_MBps)${normal}"
iopingsum=$(echo -e "$ioping_read_1\\n$ioping_read_2\\n$ioping_read_3\\n$ioping_read_4\\n$ioping_read_5" | awk 'BEGIN{max="'$first_num'";min="'first_num'"}{if($1>max){max=$1};if($1<min){min=$1}}END{print '$ioping_read_1'+'$ioping_read_2'+'$ioping_read_3'+'$ioping_read_4'+'$ioping_read_5'-max-min}')
iopingavg=$(awk 'BEGIN{printf "%.1f", '$iopingsum' / 3}')
# 去掉了最高值和最低值后的平均速度
echo -n "  ioping 顺序读取 (avg) " ; echo -e "${yellow}$(echo $iopingavg | Bps_to_MBps_1f)${normal}\n"

echo -n "  随机读取 (1st)        " ; ioping_4k_read_1=$(ioping_benchmark_4k_read) ; echo -e "${yellow}$ioping_4k_read_1 iops${normal}"
echo -n "  随机读取 (2nd)        " ; ioping_4k_read_2=$(ioping_benchmark_4k_read) ; echo -e "${yellow}$ioping_4k_read_2 iops${normal}"
echo -n "  随机读取 (3rd)        " ; ioping_4k_read_3=$(ioping_benchmark_4k_read) ; echo -e "${yellow}$ioping_4k_read_3 iops${normal}"
echo -n "  随机读取 (4th)        " ; ioping_4k_read_4=$(ioping_benchmark_4k_read) ; echo -e "${yellow}$ioping_4k_read_4 iops${normal}"
echo -n "  随机读取 (5th)        " ; ioping_4k_read_5=$(ioping_benchmark_4k_read) ; echo -e "${yellow}$ioping_4k_read_5 iops${normal}"
random_r_sum=$(echo -e "$ioping_4k_read_1\\n$ioping_4k_read_2\\n$ioping_4k_read_3\\n$ioping_4k_read_4\\n$ioping_4k_read_5" | awk 'BEGIN{max="'$first_num'";min="'first_num'"}{if($1>max){max=$1};if($1<min){min=$1}}END{print '$ioping_4k_read_1'+'$ioping_4k_read_2'+'$ioping_4k_read_3'+'$ioping_4k_read_4'+'$ioping_4k_read_5'-max-min}')
random_r_avg=$(awk 'BEGIN{printf "%.1f", '$random_r_sum' / 3}')
# 去掉了最高值和最低值后的平均速度
echo -n "  随机读取 (avg)        " ; echo -e "${yellow}$random_r_avg iops${normal}\n"

echo -n "  随机写入 (1st)        " ; ioping_4k_write_1=$(ioping_benchmark_4k_write) ; echo -e "${yellow}$ioping_4k_write_1 iops${normal}"
echo -n "  随机写入 (2nd)        " ; ioping_4k_write_2=$(ioping_benchmark_4k_write) ; echo -e "${yellow}$ioping_4k_write_2 iops${normal}"
echo -n "  随机写入 (3rd)        " ; ioping_4k_write_3=$(ioping_benchmark_4k_write) ; echo -e "${yellow}$ioping_4k_write_3 iops${normal}"
echo -n "  随机写入 (4th)        " ; ioping_4k_write_4=$(ioping_benchmark_4k_write) ; echo -e "${yellow}$ioping_4k_write_4 iops${normal}"
echo -n "  随机写入 (5th)        " ; ioping_4k_write_5=$(ioping_benchmark_4k_write) ; echo -e "${yellow}$ioping_4k_write_5 iops${normal}"
random_w_sum=$(echo -e "$ioping_4k_write_1\\n$ioping_4k_write_2\\n$ioping_4k_write_3\\n$ioping_4k_write_4\\n$ioping_4k_write_5" | awk 'BEGIN{max="'$first_num'";min="'first_num'"}{if($1>max){max=$1};if($1<min){min=$1}}END{print '$ioping_4k_write_1'+'$ioping_4k_write_2'+'$ioping_4k_write_3'+'$ioping_4k_write_4'+'$ioping_4k_write_5'-max-min}')
random_w_avg=$(awk 'BEGIN{printf "%.1f", '$random_w_sum' / 3}')
# 去掉了最高值和最低值后的平均速度
echo -n "  随机写入 (avg)        " ; echo -e "${yellow}$random_w_avg iops${normal}"
}

print_io_v2() {
#echo -e  "  ${jiacu}当前脚本版本          1.2.1${normal}\n"
echo -n "  顺序写入 (1st)        " ; dd_write_1=$(dd_benchmark) ; echo -e "${yellow}$(echo $dd_write_1 | Bps_to_MBps)${normal}"
echo -n "  顺序写入 (2nd)        " ; dd_write_2=$(dd_benchmark) ; echo -e "${yellow}$(echo $dd_write_2 | Bps_to_MBps)${normal}"
echo -n "  顺序写入 (3rd)        " ; dd_write_3=$(dd_benchmark) ; echo -e "${yellow}$(echo $dd_write_3 | Bps_to_MBps)${normal}"
echo -n "  顺序写入 (4th)        " ; dd_write_4=$(dd_benchmark) ; echo -e "${yellow}$(echo $dd_write_4 | Bps_to_MBps)${normal}"
echo -n "  顺序写入 (5th)        " ; dd_write_5=$(dd_benchmark) ; echo -e "${yellow}$(echo $dd_write_5 | Bps_to_MBps)${normal}"
ddsum=$(echo -e "$dd_write_1\\n$dd_write_2\\n$dd_write_3\\n$dd_write_4\\n$dd_write_5" | awk 'BEGIN{max="'$first_num'";min="'first_num'"}{if($1>max){max=$1};if($1<min){min=$1}}END{print '$dd_write_1'+'$dd_write_2'+'$dd_write_3'+'$dd_write_4'+'$dd_write_5'-max-min}')
ddavg=$(awk 'BEGIN{printf "%.1f", '$ddsum' / 3}')
# 去掉了最高值和最低值后的平均速度
echo -n "  顺序写入 (avg)        " ; echo -e "${yellow}$(echo $ddavg | Bps_to_MBps_1f)${normal}"
}





# Speedtest 以后再加上

print_speedtest() {
	printf "%-18s%-18s%-20s%-12s\n" " Node Name" "Upload Speed" "Download Speed" "Latency"
    speed_test '' 'Speedtest.net'
    # 法国节点
    speed_test '6027'  'FDC Servers  Paris       FRA'
	speed_test '5022'  'Online.net   Paris       FRA'
	speed_test '5022'  'Ikoula       Reims       FRA'
    # 英国节点
	speed_test '6032'  'FDC Servers  London      GER'
	speed_test '' '          '
	speed_test '' '          '
	speed_test '' '          '
    # 德国节点
	speed_test '3585' 'LeaseWeb      Frankfurt   DEU'
	speed_test '' '          '
	speed_test '' '          '
	speed_test '' '          '
	speed_test '' '          '
	speed_test '' '          '
    # 荷兰节点
	speed_test '3587'  'LeaseWeb     Haarlem     NLD'
	speed_test '6554'  'WorldStream  Naaldwijk   NLD'
	speed_test '13218' 'XS4ALL       Amsterdam   NLD'
    speed_test '9913'  'FDC Servers  Amsterdam   NLD'
	speed_test '2438'  'i3D          Amsterdam   NLD' # 这节点老挂
	speed_test '3386'  'NFOrce       Amsterdam   NLD'
	rm -rf speedtest.py
}

speed_test(){
	if [[ $1 == '' ]]; then
		temp=$(python speedtest.py --share 2>&1)
		is_down=$(echo "$temp" | grep 'Download') 
		if [[ ${is_down} ]]; then
	        local REDownload=$(echo "$temp" | awk -F ':' '/Download/{print $2}')
	        local reupload=$(echo "$temp" | awk -F ':' '/Upload/{print $2}')
	        local relatency=$(echo "$temp" | awk -F ':' '/Hosted/{print $2}')
	        local nodeName=$2

	        temp=$(echo "${REDownload}" | awk -F ' ' '{print $1}')
	        if [[ $(awk -v num1=${temp} -v num2=0 'BEGIN{print(num1>num2)?"1":"0"}') -eq 1 ]]; then
	        	printf "${yellow}%-17s${GREEN}%-18s${RED}%-20s${SKYBLUE}%-12s${PLAIN}\n" " ${nodeName}" "${reupload}" "${REDownload}" "${relatency}"
	        fi
		else
	        local cerror="ERROR"
		fi
	else
		temp=$(python speedtest.py --server $1 --share 2>&1)
		is_down=$(echo "$temp" | grep 'Download') 
		if [[ ${is_down} ]]; then
	        local REDownload=$(echo "$temp" | awk -F ':' '/Download/{print $2}')
	        local reupload=$(echo "$temp" | awk -F ':' '/Upload/{print $2}')
	        local relatency=$(echo "$temp" | awk -F ':' '/Hosted/{print $2}')
	        #local relatency=$(pingtest $3)
	        temp=$(echo "$relatency" | awk -F '.' '{print $1}')
        	if [[ ${temp} -gt 1000 ]]; then
            	relatency=" 000.000 ms"
        	fi
	        local nodeName=$2

	        temp=$(echo "${REDownload}" | awk -F ' ' '{print $1}')
	        if [[ $(awk -v num1=${temp} -v num2=0 'BEGIN{print(num1>num2)?"1":"0"}') -eq 1 ]]; then
	        	printf "${yellow}%-17s${GREEN}%-18s${RED}%-20s${SKYBLUE}%-12s${PLAIN}\n" " ${nodeName}" "${reupload}" "${REDownload}" "${relatency}"
			fi
		else
	        local cerror="ERROR"
		fi
	fi
}

# 考虑做个 iperf 和 iperf3 测试？？？



# 正文 ----------------------------------------------------------------------------------------------




# 主界面
function _menu() { clear ; echo
echo -e  " ${baizise}${bold}                  This is the choice of Steins;Gate                   ${jiacu} "

echo
echo -e  "  CPU 型号              ${cyan}$CPUNum$cname${jiacu}"
echo -e  "  CPU 核心              ${cyan}合计 ${cpucores} 核心，${cputhreads} 线程${jiacu}"
echo -e  "  CPU 状态              ${cyan}当前主频 ${freq} MHz${jiacu}"
echo -e  "  内存大小              ${cyan}$tram MB ($uram MB 已用)${jiacu}"
[[ ! $swap == 0 ]] &&
echo -e  "  交换分区              ${cyan}$swap MB ($uswap MB 已用)${jiacu}"
echo

_show_disk_info | tee -a $HOME/_show_disk_info
[[ $(cat $HOME/_show_disk_info 2>1) ]] && echo && rm -f $HOME/_show_disk_info
# if [[ ! $Seedbox == Unknown ]] || [[ ! $disk_num == 0 ]]; then echo ; fi


# [[ ! $Seedbox == Unknown ]] && DiskNumDisplay="共 $disk_num 块硬盘，合计 "
# [[ ! $Seedbox == Unknown ]] && SeedboxDiskTotalFlagOne="总" ; [[ $Seedbox == Unknown ]] && SeedboxDiskTotalFlagTwo="  "
SeedboxDiskTotalFlagTwo="  "
[[ $disk_num -ge 2 ]] && DiskNumDisplay="共 $disk_num 块硬盘，合计 " && SeedboxDiskTotalFlagOne="总" && SeedboxDiskTotalFlagTwo=""
echo -e  "  ${SeedboxDiskTotalFlagOne}硬盘大小       ${SeedboxDiskTotalFlagTwo}     ${cyan}${DiskNumDisplay}$disk_total_size GB${jiacu}"
# 已用容量这个要分类讨论有点麻烦，扔了算了……
# ($disk_used_size GB 已用)


[[ ! $Seedbox == Unknown ]] && [[ ! $EUID = 0 ]] && [[ ! $virtual == Docker ]] &&
echo -e  "  当前硬盘分区大小      ${cyan}${current_disk_size}B (共 ${current_disk_total_used}B 已用，其中你用了 ${current_disk_self_used}B)${jiacu}" &&
echo -e  "  共享盒子邻居数量      ${cyan}整台机器共 $neighbors_all_num 位邻居，其中同硬盘邻居 $neighbors_same_disk_num 位${jiacu}"



echo
echo -e  "  服务器时间            ${cyan}$date${jiacu}"
echo -e  "  运行时间              ${cyan}$uptime1${jiacu}"
echo -e  "  系统负载              ${cyan}$load${jiacu}"
[[ $virtual ]] &&
echo -e  "  虚拟化技术            ${cyan}$virtual${jiacu}"
echo



[[ $show_ip == 1 ]] && {
echo -e  "  IPv4 地址             ${green}$serveripv4_show${jiacu}"
[[ $serveripv6 ]] &&
echo -e  "  IPv6 地址             ${green}$serveripv6_show${jiacu}"
[[ ! $Seedbox == Unknown ]] &&
echo -e  "  盒子域名              ${green}$serverfqdn${jiacu}" ; }

[[ $show_ipip == 1 ]] && [[ ! -z $ipip_ISP ]] && {
[[ ! -z $ipip_rDNS ]] && [[ ! $Seedbox == Unknown || $full_ip == 1 ]] && 
echo -e  "  反向域名              ${green}$ipip_rDNS${jiacu}"
echo -e  "  运营商                ${green}$ipip_ISP${jiacu}"
echo -e  "  AS  信息              ${green}$ipip_ASN, $ipip_AS${jiacu}"
echo -e  "  地理位置              ${green}$ipip_Loc${jiacu}" ; }

[[ $show_ip == 1 || $show_ipip == 1 ]] && echo



echo -e  "  操作系统              ${green}$DISTRO $osversion $CODENAME ($arch)${jiacu}"
[[ $running_kernel ]] &&
echo -e  "  系统内核              ${green}$running_kernel${jiacu}"
[[ $tcp_c_name ]] &&
echo -e  "  TCP 拥塞控制算法      ${green}$tcp_c_name${jiacu}"
echo



# 等于把这段注释掉
[[ $EUID = 1234 ]] && [[ -e $HOME/system_kernel_list ]] && {
echo -e  "  当前系统内所有已安装的 kernel／headers／modules 列表\n"
cat -n $HOME/system_kernel_list | sed 's/\t/ /g' | sed "s/ linux-/) ${green}linux-/g" | sed "s/     /  ${magenta}(0/g" | sed "s/    /  ${magenta}(/g"
echo
rm -f $HOME/system_kernel_list >/dev/null 2>&1 ; }

echo -e  "  ${jiacu}当前脚本版本          $ScriptVersion${normal}"
echo ; }




# 结构 ----------------------------------------------------------------------------------------------

[[ $show_ip == 1 ]] && _ip
[[ $show_ipip == 1 ]] && _ipip
_menu
[[ $test_io == 1 ]] && print_io_v2
[[ $do_ioping == 1 ]] && ioping_1

cancel
