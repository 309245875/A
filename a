#!/bin/bash
# Author: Aniverse
# https://github.com/Aniverse/A
# bash -c "$(wget -qO- https://github.com/Aniverse/A/raw/i/a)"
# bash <(curl -s https://raw.githubusercontent.com/Aniverse/A/i/a)

ScriptVersion=1.0.6
SCRIPTUPDATE=2018.11.25

# 颜色 --------------------------------------------------------------------------------------------------------



black=$(tput setaf 0); red=$(tput setaf 1); green=$(tput setaf 2); yellow=$(tput setaf 3);
blue=$(tput setaf 4); magenta=$(tput setaf 5); cyan=$(tput setaf 6); white=$(tput setaf 7);
on_red=$(tput setab 1); on_green=$(tput setab 2); on_yellow=$(tput setab 3); on_blue=$(tput setab 4);
on_magenta=$(tput setab 5); on_cyan=$(tput setab 6); on_white=$(tput setab 7); bold=$(tput bold);
dim=$(tput dim); underline=$(tput smul); reset_underline=$(tput rmul); standout=$(tput smso);
reset_standout=$(tput rmso); normal=$(tput sgr0); alert=${white}${on_red}; title=${standout};
baihuangse=${white}${on_yellow}; bailanse=${white}${on_blue}; bailvse=${white}${on_green};
baiqingse=${white}${on_cyan}; baihongse=${white}${on_red}; baizise=${white}${on_magenta};
heibaise=${black}${on_white}; jiacu=${normal}${bold}
shanshuo=$(tput blink); wuguangbiao=$(tput civis); guangbiao=$(tput cnorm)



clear

# IP 信息相关 -------------------------------------------------------------------------------------------------


# 已经不用了的代码
function _ip_info_old () {
echo -e "${bold}正在检查服务器的地理位置（可能不准） ...${normal}"
result=$( wget -t1 -T10 -qO- http://freeapi.ipip.net/$serveripv4 )
country=$( echo $result | awk -F '"' '{print $2}' )
region=$( echo $result | awk -F '"' '{print $4}' )
city=$( echo $result | awk -F '"' '{print $6}' )
citydisplay=$( echo "$city, ")
#isp=$( echo $result | awk -F '"' '{print $10}' )
echo -e "${bold}正在检查服务器的 ISP ...${normal}"
isp=$( wget --no-check-certificate -t1 -T10 -qO- https://ipapi.co/json | grep \"org\" | awk -F '"' '{print $4}' )
echo -e "${bold}正在检查服务器的 ASN ...${normal}"
asn=$(wget --no-check-certificate -t1 -T10 -qO- https://ipapi.co/asn/)

# 非常蛋疼的设计，自欺欺人
[[ $isp == "Ikoula Net SAS" ]] && isp="Ikoula"
[[ $isp == "Online S.a.s." ]] && isp="Online.net"
[[ $isp == "digitalocean.com" ]] && isp="Digital Ocean"
[[ $isp == "hetzner.de" ]] && isp="Hetzner"
[[ $isp == "leaseweb.com" ]] && isp="LeaseWeb"
[[ `hostname -A | grep vultr` ]] && isp="Vultr, Choopa"
[[ `hostname -A | grep seedhost` ]] && isp="SeedHost, LeaseWeb"
[[ $asn == AS200052 ]] && isp="Feral Hosting"
[[ $isp == "" ]] && isp="未检测到 ISP"

# serveripv4=$( ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d "addr:" )
# serveripv4=$( ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' )
# serveripv6=$( wget --no-check-certificate -qO- -t1 -T8 ipv6.icanhazip.com )
# [ -n "$(grep 'eth0:' /proc/net/dev)" ] && wangka=eth0 || wangka=`cat /proc/net/dev |awk -F: 'function trim(str){sub(/^[ \t]*/,"",str); sub(/[ \t]*$/,"",str); return str } NR>2 {print trim($1)}'  |grep -Ev '^lo|^sit|^stf|^gif|^dummy|^vmnet|^vir|^gre|^ipip|^ppp|^bond|^tun|^tap|^ip6gre|^ip6tnl|^teql|^venet|^he-ipv6|^docker' |awk 'NR==1 {print $0}'`
# wangka=` ifconfig -a | grep -B 1 $(ip route get 8.8.8.8 | awk 'NR==1 {print $NF}') | head -n1 | awk '{print $1}' | sed "s/:$//"  `
# wangka=`  ip route get 8.8.8.8 | awk '{print $5}'  `
# serverlocalipv6=$( ip addr show dev $wangka | sed -e's/^.*inet6 \([^ ]*\)\/.*$/\1/;t;d' | head -n1 )
}

### 是否为 IP 地址 ###
function isValidIpAddress() { echo $1 | grep -qE '^[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?$' ; }

### 是否为内网 IP 地址 ###
function isInternalIpAddress() { echo $1 | grep -qE '(192\.168\.((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.((\d{1,2})$|(1\d{2})$|(2[0-4]\d)$|(25[0-5])$))|(172\.((1[6-9])|(2\d)|(3[0-1]))\.((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.((\d{1,2})$|(1\d{2})$|(2[0-4]\d)$|(25[0-5])$))|(10\.((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.((\d{1,2})$|(1\d{2})$|(2[0-4]\d)$|(25[0-5])$))' ; }




function _ip() {

echo -e "${bold}正在检查服务器的 IPv4 信息 ...${normal}"
serveripv4=$( ip route get 8.8.8.8 | awk '{print $3}' | head -1 )

isInternalIpAddress "$serveripv4" || serveripv4=$( wget --no-check-certificate -t1 -T6 -qO- v4.ipv6-test.com/api/myip.php )
isValidIpAddress    "$serveripv4" || serveripv4=$( wget --no-check-certificate -t1 -T6 -qO- checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//' )
isValidIpAddress    "$serveripv4" || serveripv4=$( wget --no-check-certificate -t1 -T7 -qO- ipecho.net/plain )
isValidIpAddress    "$serveripv4" || { echo "${red}${shanshuo}WARNING ${jiacu}${underline}Failed to detect your public IPv4 address, use internal address instead${jiacu}" ; serveripv4=$( ip route get 8.8.8.8 | awk '{print $3}' | head -1 ) ; }

echo -e "${bold}正在检查服务器的 IPv6 信息 ...${normal}"
serveripv6=$( wget -t1 -T5 -qO- v6.ipv6-test.com/api/myip.php | grep -Eo "[0-9a-z:]+" | head -n1 )

echo -e "${bold}正在检查服务器的其他 IP 信息 ...${normal}"

wget --no-check-certificate -qO- https://www.ipip.net/ip.html > ~/ipip_result 2>&1

  ipip_IP=$( cat ~/ipip_result | grep -A3 当前IP     | grep -oE "[0-9]+.[0-9]+.[0-9]+.[0-9]+" | head -1 )
 ipip_ASN=$( cat ~/ipip_result | grep -C7 ASN数据    | grep -oE "AS[0-9]+" | head -1 )
ipip_CIDR=$( cat ~/ipip_result | grep -C7 ASN数据    | grep -oE "[0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+" | head -1 )
ipip_rDNS=$( cat ~/ipip_result | grep -oE "rDNS: [a-zA-Z0-9.-]+" | sed "s/rDNS: //" )
 ipip_Loc=$( cat ~/ipip_result | grep -A3 地理位置   | grep -v 地理位置 | cut -d '>' -f2 | cut -d '<' -f1 )
 ipip_Loc=$( echo $ipip_Loc    | sed "s/ //g" ) # 执行两次，转换格式
 ipip_ISP=$( cat ~/ipip_result | grep -A3 运营商     | grep -v 运营商   | cut -d '>' -f2 | cut -d '<' -f1 )
 ipip_ISP=$( echo $ipip_Loc    | sed "s/ //g" ) # 执行两次，转换格式

rm -f ~/ipip_result

serverfqdn=`  hostname -f  `

showip=1

}





# 操作系统、内核等参数检测 ---------------------------------------------------------------------------------------




echo -e "${bold}正在检查操作系统与内核 ...${normal}"

[ -f /etc/redhat-release ] && KNA=$(awk '{print $1}' /etc/redhat-release)
[ -f /etc/os-release     ] && KNA=$(awk -F'[= "]' '/PRETTY_NAME/{print $3}' /etc/os-release)
[ -f /etc/lsb-release    ] && KNA=$(awk -F'[="]+' '/DISTRIB_ID/{print $2}' /etc/lsb-release)

get_opsy() {
[ -f /etc/redhat-release ] && awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release && return
[ -f /etc/os-release     ] && awk -F'[= "]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return
[ -f /etc/lsb-release    ] && awk -F'[="]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return ; }

running_kernel=` uname -r `
arch=$( uname -m )         # 架构，可以识别 ARM
lbit=$( getconf LONG_BIT ) # 只显示多少位，无法识别 ARM

DISTRO=`  awk -F'[= "]' '/PRETTY_NAME/{print $3}' /etc/os-release  `
DISTROL=`  echo $DISTRO | tr 'A-Z' 'a-z'  `
[[ $DISTRO =~ (Ubuntu|Debian) ]]  && CODENAME=`  cat /etc/os-release | grep VERSION= | tr '[A-Z]' '[a-z]' | sed 's/\"\|(\|)\|[0-9.,]\|version\|lts//g' | awk '{print $2}' | head -n1  `
[[ $DISTRO == Ubuntu ]] && osversion=`  grep Ubuntu /etc/issue | head -1 | grep -oE  "[0-9.]+"  `
[[ $DISTRO == Debian ]] && osversion=`  cat /etc/debian_version  `

[[ $KNA == CentOS ]] && DISTRO=$( get_opsy )

[[ `command -v dpkg` ]] && {
rm -f ~/system_kernel_list
dpkg -l | grep linux-image   | awk '{print $2}' >  ~/system_kernel_list
dpkg -l | grep linux-headers | awk '{print $2}' >> ~/system_kernel_list
dpkg -l | grep linux-modules | awk '{print $2}' >> ~/system_kernel_list
dpkg -l | grep ovhkernel     | awk '{print $2}' >> ~/system_kernel_list
dpkg -l | grep pve-kernel    | awk '{print $2}' >> ~/system_kernel_list ; }



# TCP 信息相关 ---------------------------------------------------------------------------------------------------


echo -e "${bold}正在检查 TCP 信息 ...${normal}"

tcp_control=$( cat /proc/sys/net/ipv4/tcp_congestion_control )
tcp_control_all=$( cat /proc/sys/net/ipv4/tcp_available_congestion_control )

tcp_c_name=$tcp_control
[[ $tcp_control == bbr_powered ]] && tcp_c_name="bbr_powered (用 Vicer 脚本安装的 Yankee 版魔改 BBR)"
[[ $tcp_control == tsunami ]] && tcp_c_name="tsunami (Yankee 版魔改 BBR)"
[[ $tcp_control == nanqinlang ]] && tcp_c_name="nanqinlang (南琴浪版魔改 BBR)"

# 检查理论上内核是否支持锐速
SSKernel="${red}否${jiacu}"
URLKernel=https://raw.githubusercontent.com/0oVicero0/serverSpeeder_kernel/master/serverSpeeder.txt
AcceVer=$(wget --no-check-certificate -qO- "$URLKernel" |grep "$KNA/" |grep "/x$KernelBit/" |grep "/$running_kernel/" |awk -F'/' '{print $NF}' |sort -n -k 2 -t '_' |tail -n 1)
MyKernel=$(wget --no-check-certificate -qO- "$URLKernel" |grep "$KNA/" |grep "/x$KernelBit/" |grep "/$running_kernel/" |grep "$AcceVer" |tail -n 1)
[[ ! -z "$MyKernel" ]] && SSKernel="${green}是${jiacu}"

# 检查理论上内核是否支持原版 BBR
function version_ge(){ test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" == "$1" ; }

kernel_vvv=$( uname -r | cut -d- -f1 )
if version_ge $kernel_vvv 4.9                                     ; then BBRKernel="${green}是${jiacu}" ; else BBRKernel="${red}否${jiacu}" ; fi
if version_ge $kernel_vvv 4.10 && ! version_ge $kernel_vvv 4.16   ; then YKKernel="${green}是${jiacu}"  ; else YKKernel="${red}否${jiacu}"  ; fi
if version_ge $kernel_vvv 4.9.3 && ! version_ge $kernel_vvv 4.16  ; then NQLKernel="${green}是${jiacu}" ; else NQLKernel="${red}否${jiacu}" ; fi

# 检查 锐速 与 BBR 是否已启用
[[ ` ps aux | grep appex | grep -v grep ` ]] && SSrunning="${green}是${jiacu}" || SSrunning="${red}否${jiacu}"
if [[ $tcp_control =~ (nanqinlang|tsunami|bbr|bbr2|bbr_powered) ]]; then bbrinuse="${green}是${jiacu}"
else bbrinuse="${red}否${jiacu}" ; fi
# if [[ `lsmod | grep -E "bbr|nanqinlang|tsunami"` ]] ; then bbrinuse="${green}是${jiacu}" ; else bbrinuse="${red}否${jiacu}" ; fi



# Virt-what 相关 ----------------------------------------------------------------------------------------------



# if [[ $EUID = 0 ]]; then
# 10086 的意义就在于让这段代码无法运行，等于注释掉了
if [[ $EUID = 10086 ]]; then
echo -e "${bold}正在检查虚拟化技术 ...${normal}"
virtualx=$(dmesg) 2>/dev/null
if grep docker /proc/1/cgroup -qa; then
virtual="Docker"
elif grep lxc /proc/1/cgroup -qa; then
virtual="Lxc"
elif grep -qa container=lxc /proc/1/environ; then
virtual="Lxc"
elif [[ -f /proc/user_beancounters ]]; then
virtual="OpenVZ"
elif [[ "$virtualx" == *kvm-clock* ]]; then
virtual="Kernel-based Virtual Machine (KVM)"
elif [[ "$virtualx" == *"VMware Virtual Platform"* ]]; then
virtual="VMware"
elif [[ "$virtualx" == *"Parallels Software International"* ]]; then
virtual="Parallels"
elif [[ "$virtualx" == *VirtualBox* ]]; then
virtual="VirtualBox"
elif [[ -e /proc/xen ]]; then
virtual="Xen"
else
virtual="未检测到虚拟化技术（可能是独立服务器）"
fi ; fi



if [[ $EUID = 0 ]]; then
    echo -e "${bold}正在检查虚拟化技术 ...${normal}"
    wget --no-check-certificate -qO /usr/local/bin/virt-what https://github.com/Aniverse/inexistence/raw/master/03.Files/app/virt-what
    mkdir -p /usr/lib/virt-what
    wget --no-check-certificate -qO /usr/lib/virt-what/virt-what-cpuid-helper https://github.com/Aniverse/inexistence/raw/master/03.Files/app/virt-what-cpuid-helper
    chmod +x /usr/local/bin/virt-what /usr/lib/virt-what/virt-what-cpuid-helper
    virtual="$(virt-what)" 2>/dev/null
fi



# 其他系统信息 ----------------------------------------------------------------------------------------------



uptime1=$( awk '{a=$1/86400;b=($1%86400)/3600;c=($1%3600)/60} {printf("%d days %d hour %d min\n",a,b,c)}' /proc/uptime )
uptime2=`uptime | grep -ohe 'up .*' | sed 's/,/\ hours/g' | awk '{ printf $2" "$3 }'`
load=$( w | head -1 | awk -F'load average:' '{print $2}' | sed 's/^[ \t]*//;s/[ \t]*$//' )



# 硬盘信息 ----------------------------------------------------------------------------------------------


echo -e "${bold}正在检查硬盘信息 ...${normal}"

# 硬盘大小计算
calc_disk() {
local total_size=0 ; local array=$@
for size in ${array[@]} ; do
[ "${size}" == "0" ] && size_t=0 || size_t=`echo ${size:0:${#size}-1}`
[ "`echo ${size:(-1)}`" == "K" ] && size=0
[ "`echo ${size:(-1)}`" == "M" ] && size=$( awk 'BEGIN{printf "%.1f", '$size_t' / 1024}' )
[ "`echo ${size:(-1)}`" == "T" ] && size=$( awk 'BEGIN{printf "%.1f", '$size_t' * 1024}' )
[ "`echo ${size:(-1)}`" == "G" ] && size=${size_t}
total_size=$( awk 'BEGIN{printf "%.1f", '$total_size' + '$size'}' )
done ; echo ${total_size} ; }

disk_num=`  df -lh | grep -P "/home[0-9]+|media|/$" | wc -l  `
# 计算总共空间的时候，排除掉 FH SSD 每个用户限额的空间；计算已用空间的时候不排除（因为原先的单个 md 已用空间只有 128k/256k）
disk_size1=($( LANG=C df -hPl | grep -wvP '\-|none|tmpfs|devtmpfs|by-uuid|chroot|Filesystem|udev|docker|md[0-9]+/[a-z]*' | awk '{print $2}' ))
disk_size2=($( LANG=C df -hPl | grep -wvP '\-|none|tmpfs|devtmpfs|by-uuid|chroot|Filesystem|udev|docker' | awk '{print $3}' ))
disk_total_size=$( calc_disk ${disk_size1[@]} )
disk_used_size=$( calc_disk ${disk_size2[@]} )



# Origin code from https://github.com/dave-pl/hwcheck
function _disk_raid_check () {

rm -f ~/disk.info

# 检查 RAID 类型
if [[ -z $(lspci|grep "RAID bus controller") && -z $(fdisk -l 2>/dev/null|grep /dev/nvme) ]]; then
    raidcard=NoRaid
elif [[ `lspci|grep -i "RAID bus controller" |wc -l` -eq 1 ]]; then
    if [[ -n `lspci|grep -i "RAID bus controller"|grep "MegaRAID"` ]]; then
        raidcard=MegaRAID
    elif [[ -n `lspci|grep -i "RAID bus controller"|grep "Hewlett-Packard"` ]]; then
        raidcard=HP-RAID
    elif [[ -n $(fdisk -l 2>/dev/null|grep /dev/nvme) ]]; then
        raidcard=NVME
    fi 
elif [[ `lspci|grep -i "RAID bus controller" |wc -l` -ge 2 ]]; then
    sleep 0
fi

case "$raidcard" in
    NoRaid   ) disk=$(fdisk -l 2>/dev/null| grep -i dev |egrep -v "(/dev/[brm])"| awk '/:/ {print $2}'| cut -f 1 -d ":") ; d=0
               for i in $disk; do
                   d=$(expr $d + 1)
                   echo "disk-$d $i $(smartctl -a $i | grep Power_On_Hours | awk '{print $NF}') $(smartctl -a $i | grep "Device Model" | sed "s/Device Model[:]\?//" | awk '{print $1,$2,$3,$4}')" >> ~/disk.info
               done
               ;;
    MegaRAID ) for i in `seq 0 9` ; do
			       [[ $( smartctl -a -d megaraid,$i /dev/sg0 | grep Power_On_Hours ) ]] &&
			       echo "disk-$(expr $i + 1) $(smartctl -a -d megaraid,$i /dev/sg0 | grep Power_On_Hours | awk '{print $NF}') $(smartctl -a -d megaraid,$i /dev/sg0 | grep "Device Model" | sed "s/Device Model[:]\?//" | awk '{print $1,$2,$3,$4}')" >> ~/disk.info
			   done
               ;;
    HP-RAID  ) for i in `seq 0 11` ; do
                   [[ $( smartctl -a -d cciss,$i /dev/sg0 | grep Power_On_Hours ) ]] &&
			       echo "disk-$(expr $i + 1) $(smartctl -a -d cciss,$i /dev/sg0 | grep Power_On_Hours | awk '{print $NF}') $(smartctl -a -d cciss,$i /dev/sg0 | grep "Device Model" | sed "s/Device Model[:]\?//" | awk '{print $1,$2,$3,$4}')" >> ~/disk.info
			   done
               ;;
esac ; }


# 硬盘通电时间，可能只有单个硬盘的独服才有效
# 事实上 VPS 可能也有独立的硬盘，不过我懒得管他了。。。
if [[ $EUID = 0 ]] && [[ ! "$(virt-what)" ]]; then

    if  [ ! -e /usr/sbin/smartctl ]; then
        echo -e "${bold}正在更新系统源 ...${normal}"
        apt-get update >/dev/null 2>&1
        echo -e "${bold}正在安装 smartmontools ...${normal}"
        DEBIAN_FRONTEND=noninteractive apt-get -y install smartmontools >/dev/null 2>&1
    fi

  # result=$(smartctl -a $(result=$(cat /proc/mounts) && echo $(echo "$result" | awk '/data=ordered/{print $1}') | awk '{print $1}') 2>&1) && power_time=$(echo "$result" | awk '/Power_On/{print $10}') # echo $power_time
  # disk_model=$(echo "$result" | grep "Device Model" | sed "s/Device Model[:]\?//" | awk '{print $1,$2,$3,$4}') # echo $disk_model
  # echo "$result" | grep "Device Model" | sed "s/Device Model[:]\?.* \([a-zA-Z]\)/\1/"
  # [[ ! -z $power_time ]] && showpowertime=1

    _disk_raid_check

fi


function _show_disk_info () {

disk_num=$( cat ~/disk.info 2>/dev/null | wc -l )

  if [[ $disk_num == 0 ]]; then
    sleep 0
elif [[ $disk_num == 1 ]]; then
    echo -e  "  硬盘型号                             ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-1 | awk '{print $4,$5,$6,$7}')${jiacu}"
    echo -e  "  硬盘通电时间                         ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-1 | awk '{print $3}') 个小时${jiacu}"
elif [[ $disk_num -ge 2 ]]; then
    echo -e  "  第一块硬盘型号                       ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-1 | awk '{print $4,$5,$6,$7}')${jiacu}"
    echo -e  "  第一块硬盘通电时间                   ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-1 | awk '{print $3}') 个小时${jiacu}"
    echo -e  "  第二块硬盘型号                       ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-2 | awk '{print $4,$5,$6,$7}')${jiacu}"
    echo -e  "  第二块硬盘通电时间                   ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-2 | awk '{print $3}') 个小时${jiacu}"
    [[ $disk_num -ge 3 ]] &&
    echo -e  "  第三块硬盘型号                       ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-3 | awk '{print $4,$5,$6,$7}')${jiacu}" &&
    echo -e  "  第三块硬盘通电时间                   ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-3 | awk '{print $3}') 个小时${jiacu}"
    [[ $disk_num -ge 4 ]] &&
    echo -e  "  第四块硬盘型号                       ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-4 | awk '{print $4,$5,$6,$7}')${jiacu}" &&
    echo -e  "  第四块硬盘通电时间                   ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-4 | awk '{print $3}') 个小时${jiacu}"
    [[ $disk_num -ge 5 ]] &&
    echo -e  "  第五块硬盘型号                       ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-5 | awk '{print $4,$5,$6,$7}')${jiacu}" &&
    echo -e  "  第五块硬盘通电时间                   ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-5 | awk '{print $3}') 个小时${jiacu}"
    [[ $disk_num -ge 6 ]] &&
    echo -e  "  第六块硬盘型号                       ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-6 | awk '{print $4,$5,$6,$7}')${jiacu}" &&
    echo -e  "  第六块硬盘通电时间                   ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-6 | awk '{print $3}') 个小时${jiacu}"
    [[ $disk_num -ge 7 ]] &&
    echo -e  "  第七块硬盘型号                       ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-7 | awk '{print $4,$5,$6,$7}')${jiacu}" &&
    echo -e  "  第七块硬盘通电时间                   ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-7 | awk '{print $3}') 个小时${jiacu}"
    [[ $disk_num -ge 8 ]] &&
    echo -e  "  第八块硬盘型号                       ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-8 | awk '{print $4,$5,$6,$7}')${jiacu}" &&
    echo -e  "  第八块硬盘通电时间                   ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-8 | awk '{print $3}') 个小时${jiacu}"
    [[ $disk_num -ge 9 ]] &&
    echo -e  "  第九块硬盘型号                       ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-9 | awk '{print $4,$5,$6,$7}')${jiacu}" &&
    echo -e  "  第九块硬盘通电时间                   ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-9 | awk '{print $3}') 个小时${jiacu}"
    [[ $disk_num -ge 10 ]] &&
    echo -e  "  第十块硬盘型号                       ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-10 | awk '{print $4,$5,$6,$7}')${jiacu}" &&
    echo -e  "  第十块硬盘通电时间                   ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-10 | awk '{print $3}') 个小时${jiacu}"
    [[ $disk_num -ge 11 ]] &&
    echo -e  "  第十一块硬盘型号                     ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-11 | awk '{print $4,$5,$6,$7}')${jiacu}" &&
    echo -e  "  第十一块硬盘通电时间                 ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-11 | awk '{print $3}') 个小时${jiacu}"
    [[ $disk_num -ge 12 ]] &&
    echo -e  "  第十二块硬盘型号                     ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-12 | awk '{print $4,$5,$6,$7}')${jiacu}" &&
    echo -e  "  第十二块硬盘通电时间                 ${cyan}$(cat ~/disk.info 2>/dev/null | grep disk-12 | awk '{print $3}') 个小时${jiacu}"
fi ; }



# 其他硬件信息 ----------------------------------------------------------------------------------------------

echo -e "${bold}正在检查其他硬件信息 ...${normal}"

# CPU
cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//' )
cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
cpucores_single=$( grep 'core id' /proc/cpuinfo | sort -u | wc -l )
freq=$( awk -F: '/cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//' )
# physical_cpu_number=$( grep 'physical id' /proc/cpuinfo | cut -c15-17 )
# cpu_percent=$( top -b -n 1 | grep Cpu | awk '{print $2}' | cut -f 1 -d "." )
cpunumbers=$( grep 'physical id' /proc/cpuinfo | sort -u | wc -l )
cpucores=$( expr $cpucores_single \* $cpunumbers )
cputhreads=$( grep 'processor' /proc/cpuinfo | sort -u | wc -l )
[[ $cpunumbers == 2 ]] && CPUNum='双路 ' ; [[ $cpunumbers == 4 ]] && CPUNum='四路 ' ; [[ $cpunumbers == 8 ]] && CPUNum='八路 '

# 内存
tram=$( free -m | awk '/Mem/ {print $2}' )
uram=$( free -m | awk '/Mem/ {print $3}' )
swap=$( free -m | awk '/Swap/ {print $2}' )
uswap=$( free -m | awk '/Swap/ {print $3}' )
memory_usage=`free -m |grep -i mem | awk '{printf ("%.2f\n",$3/$2*100)}'`%

users=`users | wc -w`
date=$( date +%Y-%m-%d" "%H:%M:%S )
processes=`ps aux | wc -l`



# FH／SH 邻居信息 ------------------------------------------------------------------------------------------



Seedbox=Unknown ; [[ `  hostname -f | grep feral  ` ]] && Seedbox=FH ; [[ `  hostname -f | grep seedhost  ` ]] && Seedbox=SH

[[ ! $Seedbox == Unknown ]] && {
echo -e "${bold}正在检查同盒子的邻居情况 ...${normal}"
current_disk=`  echo $(pwd) | sed "s/\/$(whoami)//"  `

neighbors_same_disk_num=`  getent passwd | grep -v $(whoami) | grep $current_disk/ | wc -l  `
neighbors_same_disk_name=`  getent passwd | grep -v $(whoami) | grep $current_disk/ | awk -F ":" '{print $1}'  `
neighbors_all_num=`  getent passwd | grep -v $(whoami) | grep -E "home[0-9]+|media" | wc -l  `

current_disk_size=($( LANG=C df -hPl | grep $current_disk | awk '{print $2}' ))
current_disk_total_used=($( LANG=C df -hPl | grep $current_disk | awk '{print $3}' ))
#current_disk_avai=($( LANG=C df -hPl | grep $current_disk | awk '{print $4}' ))
#current_disk_perc=($( LANG=C df -hPl | grep $current_disk | awk '{print $5}' ))
current_disk_self_used=` du -sh ~ | awk -F " " '{print $1}' `
}


# 测试 ----------------------------------------------------------------------------------------------



# dd IO 测试
io_test() { (LANG=C dd if=/dev/zero of=test_file_$$ bs=512K count=$1 conv=fdatasync && rm -f test_file_$$ ) 2>&1 | awk -F, '{io=$NF} END { print io}' | sed 's/^[ \t]*//;s/[ \t]*$//' ; }

# 检查剩余空间
freedisk() {
	freespace=$( df -m . | awk 'NR==2 {print $4}' )
	if [[ $freespace -gt 1024 ]]; then
		printf "%s" $((1024*2))
	elif [[ $freespace -gt 512 ]]; then
		printf "%s" $((512*2))
	elif [[ $freespace -gt 256 ]]; then
		printf "%s" $((256*2))
	elif [[ $freespace -gt 128 ]]; then
		printf "%s" $((128*2))
	else
		printf 1
	fi
}

# 显示 IO 测试结果
print_io() {
	if [[ $1 == "fast" ]]; then
		writemb=$((128*2))
	else
		writemb=$(freedisk)
	fi
	
	writemb_size="$(( writemb / 2 ))MB"
	if [[ $writemb_size == "1024MB" ]]; then
		writemb_size="1.0 GB"
	fi

	if [[ $writemb != "1" ]]; then
        # 因为有些情况下第一次测试 IO 速度异常的高，所以多跑一次但是不计入统计
        io0=$( io_test $writemb )
		echo -n "  I/O 速度 ( $writemb_size )   "
		io1=$( io_test $writemb )
		echo -e "${yellow}$io1${normal}"
		echo -n "  I/O 速度 ( $writemb_size )   "
		io2=$( io_test $writemb )
		echo -e "${yellow}$io2${normal}"
		echo -n "  I/O 速度 ( $writemb_size )   "
		io3=$( io_test $writemb )
		echo -e "${yellow}$io3${normal}"
		echo -n "  I/O 速度 ( $writemb_size )   "
		io4=$( io_test $writemb )
		echo -e "${yellow}$io3${normal}"
        echo -n "  I/O 速度 ( $writemb_size )   "
		io5=$( io_test $writemb )
		echo -e "${yellow}$io3${normal}"
		ioraw1=$( echo $io1 | awk 'NR==1 {print $1}' )
		[ "`echo $io1 | awk 'NR==1 {print $2}'`" == "GB/s" ] && ioraw1=$( awk 'BEGIN{print '$ioraw1' * 1024}' )
		ioraw2=$( echo $io2 | awk 'NR==1 {print $1}' )
		[ "`echo $io2 | awk 'NR==1 {print $2}'`" == "GB/s" ] && ioraw2=$( awk 'BEGIN{print '$ioraw2' * 1024}' )
		ioraw3=$( echo $io3 | awk 'NR==1 {print $1}' )
		[ "`echo $io3 | awk 'NR==1 {print $2}'`" == "GB/s" ] && ioraw3=$( awk 'BEGIN{print '$ioraw3' * 1024}' )
		ioraw4=$( echo $io4 | awk 'NR==1 {print $1}' )
		[ "`echo $io4 | awk 'NR==1 {print $2}'`" == "GB/s" ] && ioraw4=$( awk 'BEGIN{print '$ioraw3' * 1024}' )
		ioraw5=$( echo $io5 | awk 'NR==1 {print $1}' )
		[ "`echo $io5 | awk 'NR==1 {print $2}'`" == "GB/s" ] && ioraw5=$( awk 'BEGIN{print '$ioraw3' * 1024}' )
		ioall=$( awk 'BEGIN{print '$ioraw1' + '$ioraw2' + '$ioraw3' + '$ioraw4' + '$ioraw5'}' )
		ioavg=$( awk 'BEGIN{printf "%.1f", '$ioall' / 5}' )
		echo -e "  I/O 速度 (  平均  )   ${yellow}$ioavg MB/s${normal}"
	else
		echo -e " ${red}Not enough space!${normal}"
	fi
echo ; }

# Speedtest 以后再加上

print_speedtest() {
	printf "%-18s%-18s%-20s%-12s\n" " Node Name" "Upload Speed" "Download Speed" "Latency"
    speed_test '' 'Speedtest.net'
    # 法国节点
    speed_test '6027'  'FDC Servers  Paris       FRA'
	speed_test '5022'  'Online.net   Paris       FRA'
	speed_test '5022'  'Ikoula       Reims       FRA'
    # 英国节点
	speed_test '6032'  'FDC Servers  London      GER'
	speed_test '' '          '
	speed_test '' '          '
	speed_test '' '          '
    # 德国节点
	speed_test '3585' 'LeaseWeb      Frankfurt   DEU'
	speed_test '' '          '
	speed_test '' '          '
	speed_test '' '          '
	speed_test '' '          '
	speed_test '' '          '
    # 荷兰节点
	speed_test '3587'  'LeaseWeb     Haarlem     NLD'
	speed_test '6554'  'WorldStream  Naaldwijk   NLD'
	speed_test '13218' 'XS4ALL       Amsterdam   NLD'
    speed_test '9913'  'FDC Servers  Amsterdam   NLD'
	speed_test '2438'  'i3D          Amsterdam   NLD' # 这节点老挂
	speed_test '3386'  'NFOrce       Amsterdam   NLD'
	rm -rf speedtest.py
}

speed_test(){
	if [[ $1 == '' ]]; then
		temp=$(python speedtest.py --share 2>&1)
		is_down=$(echo "$temp" | grep 'Download') 
		if [[ ${is_down} ]]; then
	        local REDownload=$(echo "$temp" | awk -F ':' '/Download/{print $2}')
	        local reupload=$(echo "$temp" | awk -F ':' '/Upload/{print $2}')
	        local relatency=$(echo "$temp" | awk -F ':' '/Hosted/{print $2}')
	        local nodeName=$2

	        temp=$(echo "${REDownload}" | awk -F ' ' '{print $1}')
	        if [[ $(awk -v num1=${temp} -v num2=0 'BEGIN{print(num1>num2)?"1":"0"}') -eq 1 ]]; then
	        	printf "${yellow}%-17s${GREEN}%-18s${RED}%-20s${SKYBLUE}%-12s${PLAIN}\n" " ${nodeName}" "${reupload}" "${REDownload}" "${relatency}"
	        fi
		else
	        local cerror="ERROR"
		fi
	else
		temp=$(python speedtest.py --server $1 --share 2>&1)
		is_down=$(echo "$temp" | grep 'Download') 
		if [[ ${is_down} ]]; then
	        local REDownload=$(echo "$temp" | awk -F ':' '/Download/{print $2}')
	        local reupload=$(echo "$temp" | awk -F ':' '/Upload/{print $2}')
	        local relatency=$(echo "$temp" | awk -F ':' '/Hosted/{print $2}')
	        #local relatency=$(pingtest $3)
	        temp=$(echo "$relatency" | awk -F '.' '{print $1}')
        	if [[ ${temp} -gt 1000 ]]; then
            	relatency=" 000.000 ms"
        	fi
	        local nodeName=$2

	        temp=$(echo "${REDownload}" | awk -F ' ' '{print $1}')
	        if [[ $(awk -v num1=${temp} -v num2=0 'BEGIN{print(num1>num2)?"1":"0"}') -eq 1 ]]; then
	        	printf "${yellow}%-17s${GREEN}%-18s${RED}%-20s${SKYBLUE}%-12s${PLAIN}\n" " ${nodeName}" "${reupload}" "${REDownload}" "${relatency}"
			fi
		else
	        local cerror="ERROR"
		fi
	fi
}

# 考虑做个 iperf 和 iperf3 测试？？？



# 正文 ----------------------------------------------------------------------------------------------




# 主界面
function _menu() { clear ; echo
echo -e  " ${baizise}${bold}                               This is the choice of Steins;Gate                               ${jiacu} "

[[ ! $Seedbox == Unknown ]] && SeedboxDiskTotalFlagOne="总" ; [[ $Seedbox == Unknown ]] && SeedboxDiskTotalFlagTwo="  "

echo
echo -e  "  CPU 型号                             ${cyan}$CPUNum$cname${jiacu}"
echo -e  "  CPU 核心                             ${cyan}合计 ${cpucores} 核心，${cputhreads} 线程${jiacu}"
echo -e  "  CPU 状态                             ${cyan}当前主频 ${freq} MHz${jiacu}"
echo -e  "  内存大小                             ${cyan}$tram MB ($uram MB 已用)${jiacu}"
[[ ! $swap == 0 ]] &&
echo -e  "  交换分区                             ${cyan}$swap MB ($uswap MB 已用)${jiacu}"

if [[ ! $Seedbox == Unknown ]] || [[ ! $disk_num == 0 ]]; then
echo ; fi
_show_disk_info
echo -e  "  ${SeedboxDiskTotalFlagOne}硬盘大小   ${SeedboxDiskTotalFlagTwo}                        ${cyan}共 $disk_num 个硬盘分区，合计 $disk_total_size GB ($disk_used_size GB 已用)${jiacu}"

[[ ! $Seedbox == Unknown ]] &&
echo -e  "  当前硬盘大小                         ${cyan}${current_disk_size}B (共 ${current_disk_total_used}B 已用，其中你用了 ${current_disk_self_used}B)${jiacu}" &&
echo -e  "  共享盒子邻居数量                     ${cyan}整台机器共 $neighbors_all_num 位邻居，其中同硬盘邻居 $neighbors_same_disk_num 位${jiacu}"



echo
echo -e  "  服务器时间                           ${cyan}$date${jiacu}"
echo -e  "  运行时间                             ${cyan}$uptime1${jiacu}"
echo -e  "  系统负载                             ${cyan}$load${jiacu}"
[[ $virtual ]] &&
echo -e  "  虚拟化技术                           ${cyan}$virtual${jiacu}"
echo




[[ $showip == 1 ]] && {
[[ ! -z ipip_rDNS ]] &&
echo -e  "  反向域名                             ${green}$ipip_rDNS${jiacu}"
echo -e  "  IPv4 地址                            ${green}$serveripv4${jiacu}"
[[ $serveripv6 ]] &&
echo -e  "  IPv6 地址                            ${green}$serveripv6${jiacu}"
echo -e  "  运营商                               ${green}$ipip_ISP${jiacu}"
echo -e  "  ASN 信息                             ${green}$ipip_ASN, $ipip_AS, ipip_CIDR${jiacu}"
echo -e  "  地理位置                             ${green}$ipip_Loc${jiacu}"
}




echo
echo -e  "  当前操作系统                         ${green}$DISTRO $osversion $CODENAME ($arch)${jiacu}"
echo -e  "  当前正在使用的 TCP 拥塞控制算法      ${green}$tcp_c_name${jiacu}"
#echo -e  "  当前可以使用的 TCP 拥塞控制算法      ${green}$tcp_control_all${jiacu}"
echo -e  "  当前正在使用的系统内核               ${green}$running_kernel${jiacu}"
# echo -e  "  当前内核是否支持 原版 BBR            $BBRKernel"
# echo -e  "  当前内核是否支持 Yankee 版魔改 BBR   $YKKernel"
# echo -e  "  当前内核是否支持 南琴浪 版魔改 BBR   $NQLKernel"
# echo -e  "  当前内核是否支持 Vicer  版锐速       $SSKernel"
echo -e  "  当前 BBR  是否已启用                 $bbrinuse"
echo -e  "  当前 锐速 是否已启用                 $SSrunning"
echo

[[ $EUID = 0 ]] && [[ -e ~/system_kernel_list ]] && {
echo -e  "  当前系统内所有已安装的 kernel／headers／modules 列表\n"
cat -n ~/system_kernel_list | sed 's/\t/ /g' | sed "s/ linux-/) ${green}linux-/g" | sed "s/     /  ${magenta}(0/g" | sed "s/    /  ${magenta}(/g"
echo
rm -f ~/system_kernel_list >/dev/null 2>&1 ; }

echo -e  "  ${jiacu}当前脚本版本：$ScriptVersion${normal}"
echo ; }




# 结构 ----------------------------------------------------------------------------------------------


_ip
_menu
print_io

